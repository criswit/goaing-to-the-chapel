{
  "version": 3,
  "sources": ["../../node_modules/@aws-sdk/util-dynamodb/dist-cjs/index.js", "../../lib/backend/lambda/process-stream-for-email.ts", "../../lib/backend/lambda/utils.ts"],
  "sourcesContent": ["\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/index.ts\nvar index_exports = {};\n__export(index_exports, {\n  NumberValueImpl: () => NumberValue,\n  convertToAttr: () => convertToAttr,\n  convertToNative: () => convertToNative,\n  marshall: () => marshall,\n  unmarshall: () => unmarshall\n});\nmodule.exports = __toCommonJS(index_exports);\n\n// src/NumberValue.ts\nvar NumberValue = class _NumberValue {\n  static {\n    __name(this, \"NumberValue\");\n  }\n  value;\n  /**\n   * This class does not validate that your string input is a valid number.\n   *\n   * @param value - a precise number, or any BigInt or string, or AttributeValue.\n   */\n  constructor(value) {\n    if (typeof value === \"object\" && \"N\" in value) {\n      this.value = String(value.N);\n    } else {\n      this.value = String(value);\n    }\n    const valueOf = typeof value.valueOf() === \"number\" ? value.valueOf() : 0;\n    const imprecise = valueOf > Number.MAX_SAFE_INTEGER || valueOf < Number.MIN_SAFE_INTEGER || Math.abs(valueOf) === Infinity || Number.isNaN(valueOf);\n    if (imprecise) {\n      throw new Error(\n        `NumberValue should not be initialized with an imprecise number=${valueOf}. Use a string instead.`\n      );\n    }\n  }\n  /**\n   * This class does not validate that your string input is a valid number.\n   *\n   * @param value - a precise number, or any BigInt or string, or AttributeValue.\n   */\n  static from(value) {\n    return new _NumberValue(value);\n  }\n  /**\n   * @returns the AttributeValue form for DynamoDB.\n   */\n  toAttributeValue() {\n    return {\n      N: this.toString()\n    };\n  }\n  /**\n   * @returns BigInt representation.\n   *\n   * @throws SyntaxError if the string representation is not convertable to a BigInt.\n   */\n  toBigInt() {\n    const stringValue = this.toString();\n    return BigInt(stringValue);\n  }\n  /**\n   * @override\n   *\n   * @returns string representation. This is the canonical format in DynamoDB.\n   */\n  toString() {\n    return String(this.value);\n  }\n  /**\n   * @override\n   */\n  valueOf() {\n    return this.toString();\n  }\n};\n\n// src/convertToAttr.ts\nvar convertToAttr = /* @__PURE__ */ __name((data, options) => {\n  if (data === void 0) {\n    throw new Error(`Pass options.removeUndefinedValues=true to remove undefined values from map/array/set.`);\n  } else if (data === null && typeof data === \"object\") {\n    return convertToNullAttr();\n  } else if (Array.isArray(data)) {\n    return convertToListAttr(data, options);\n  } else if (data?.constructor?.name === \"Set\") {\n    return convertToSetAttr(data, options);\n  } else if (data?.constructor?.name === \"Map\") {\n    return convertToMapAttrFromIterable(data, options);\n  } else if (data?.constructor?.name === \"Object\" || // for object which is result of Object.create(null), which doesn't have constructor defined\n  !data.constructor && typeof data === \"object\") {\n    return convertToMapAttrFromEnumerableProps(data, options);\n  } else if (isBinary(data)) {\n    if (data.length === 0 && options?.convertEmptyValues) {\n      return convertToNullAttr();\n    }\n    return convertToBinaryAttr(data);\n  } else if (typeof data === \"boolean\" || data?.constructor?.name === \"Boolean\") {\n    return { BOOL: data.valueOf() };\n  } else if (typeof data === \"number\" || data?.constructor?.name === \"Number\") {\n    return convertToNumberAttr(data, options);\n  } else if (data instanceof NumberValue) {\n    return data.toAttributeValue();\n  } else if (typeof data === \"bigint\") {\n    return convertToBigIntAttr(data);\n  } else if (typeof data === \"string\" || data?.constructor?.name === \"String\") {\n    if (data.length === 0 && options?.convertEmptyValues) {\n      return convertToNullAttr();\n    }\n    return convertToStringAttr(data);\n  } else if (options?.convertClassInstanceToMap && typeof data === \"object\") {\n    return convertToMapAttrFromEnumerableProps(data, options);\n  }\n  throw new Error(\n    `Unsupported type passed: ${data}. Pass options.convertClassInstanceToMap=true to marshall typeof object as map attribute.`\n  );\n}, \"convertToAttr\");\nvar convertToListAttr = /* @__PURE__ */ __name((data, options) => ({\n  L: data.filter(\n    (item) => typeof item !== \"function\" && (!options?.removeUndefinedValues || options?.removeUndefinedValues && item !== void 0)\n  ).map((item) => convertToAttr(item, options))\n}), \"convertToListAttr\");\nvar convertToSetAttr = /* @__PURE__ */ __name((set, options) => {\n  const setToOperate = options?.removeUndefinedValues ? new Set([...set].filter((value) => value !== void 0)) : set;\n  if (!options?.removeUndefinedValues && setToOperate.has(void 0)) {\n    throw new Error(`Pass options.removeUndefinedValues=true to remove undefined values from map/array/set.`);\n  }\n  if (setToOperate.size === 0) {\n    if (options?.convertEmptyValues) {\n      return convertToNullAttr();\n    }\n    throw new Error(`Pass a non-empty set, or options.convertEmptyValues=true.`);\n  }\n  const item = setToOperate.values().next().value;\n  if (item instanceof NumberValue) {\n    return {\n      NS: Array.from(setToOperate).map((_) => _.toString())\n    };\n  } else if (typeof item === \"number\") {\n    return {\n      NS: Array.from(setToOperate).map((num) => convertToNumberAttr(num, options)).map((item2) => item2.N)\n    };\n  } else if (typeof item === \"bigint\") {\n    return {\n      NS: Array.from(setToOperate).map(convertToBigIntAttr).map((item2) => item2.N)\n    };\n  } else if (typeof item === \"string\") {\n    return {\n      SS: Array.from(setToOperate).map(convertToStringAttr).map((item2) => item2.S)\n    };\n  } else if (isBinary(item)) {\n    return {\n      // Do not alter binary data passed https://github.com/aws/aws-sdk-js-v3/issues/1530\n      // @ts-expect-error Type 'ArrayBuffer' is not assignable to type 'Uint8Array'\n      BS: Array.from(setToOperate).map(convertToBinaryAttr).map((item2) => item2.B)\n    };\n  } else {\n    throw new Error(`Only Number Set (NS), Binary Set (BS) or String Set (SS) are allowed.`);\n  }\n}, \"convertToSetAttr\");\nvar convertToMapAttrFromIterable = /* @__PURE__ */ __name((data, options) => ({\n  M: ((data2) => {\n    const map = {};\n    for (const [key, value] of data2) {\n      if (typeof value !== \"function\" && (value !== void 0 || !options?.removeUndefinedValues)) {\n        map[key] = convertToAttr(value, options);\n      }\n    }\n    return map;\n  })(data)\n}), \"convertToMapAttrFromIterable\");\nvar convertToMapAttrFromEnumerableProps = /* @__PURE__ */ __name((data, options) => ({\n  M: ((data2) => {\n    const map = {};\n    for (const key in data2) {\n      const value = data2[key];\n      if (typeof value !== \"function\" && (value !== void 0 || !options?.removeUndefinedValues)) {\n        map[key] = convertToAttr(value, options);\n      }\n    }\n    return map;\n  })(data)\n}), \"convertToMapAttrFromEnumerableProps\");\nvar convertToNullAttr = /* @__PURE__ */ __name(() => ({ NULL: true }), \"convertToNullAttr\");\nvar convertToBinaryAttr = /* @__PURE__ */ __name((data) => ({ B: data }), \"convertToBinaryAttr\");\nvar convertToStringAttr = /* @__PURE__ */ __name((data) => ({ S: data.toString() }), \"convertToStringAttr\");\nvar convertToBigIntAttr = /* @__PURE__ */ __name((data) => ({ N: data.toString() }), \"convertToBigIntAttr\");\nvar validateBigIntAndThrow = /* @__PURE__ */ __name((errorPrefix) => {\n  throw new Error(`${errorPrefix} Use NumberValue from @aws-sdk/lib-dynamodb.`);\n}, \"validateBigIntAndThrow\");\nvar convertToNumberAttr = /* @__PURE__ */ __name((num, options) => {\n  if ([Number.NaN, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY].map((val) => val.toString()).includes(num.toString())) {\n    throw new Error(`Special numeric value ${num.toString()} is not allowed`);\n  } else if (!options?.allowImpreciseNumbers) {\n    if (Number(num) > Number.MAX_SAFE_INTEGER) {\n      validateBigIntAndThrow(`Number ${num.toString()} is greater than Number.MAX_SAFE_INTEGER.`);\n    } else if (Number(num) < Number.MIN_SAFE_INTEGER) {\n      validateBigIntAndThrow(`Number ${num.toString()} is lesser than Number.MIN_SAFE_INTEGER.`);\n    }\n  }\n  return { N: num.toString() };\n}, \"convertToNumberAttr\");\nvar isBinary = /* @__PURE__ */ __name((data) => {\n  const binaryTypes = [\n    \"ArrayBuffer\",\n    \"Blob\",\n    \"Buffer\",\n    \"DataView\",\n    \"File\",\n    \"Int8Array\",\n    \"Uint8Array\",\n    \"Uint8ClampedArray\",\n    \"Int16Array\",\n    \"Uint16Array\",\n    \"Int32Array\",\n    \"Uint32Array\",\n    \"Float32Array\",\n    \"Float64Array\",\n    \"BigInt64Array\",\n    \"BigUint64Array\"\n  ];\n  if (data?.constructor) {\n    return binaryTypes.includes(data.constructor.name);\n  }\n  return false;\n}, \"isBinary\");\n\n// src/convertToNative.ts\nvar convertToNative = /* @__PURE__ */ __name((data, options) => {\n  for (const [key, value] of Object.entries(data)) {\n    if (value !== void 0) {\n      switch (key) {\n        case \"NULL\":\n          return null;\n        case \"BOOL\":\n          return Boolean(value);\n        case \"N\":\n          return convertNumber(value, options);\n        case \"B\":\n          return convertBinary(value);\n        case \"S\":\n          return convertString(value);\n        case \"L\":\n          return convertList(value, options);\n        case \"M\":\n          return convertMap(value, options);\n        case \"NS\":\n          return new Set(value.map((item) => convertNumber(item, options)));\n        case \"BS\":\n          return new Set(value.map(convertBinary));\n        case \"SS\":\n          return new Set(value.map(convertString));\n        default:\n          throw new Error(`Unsupported type passed: ${key}`);\n      }\n    }\n  }\n  throw new Error(`No value defined: ${JSON.stringify(data)}`);\n}, \"convertToNative\");\nvar convertNumber = /* @__PURE__ */ __name((numString, options) => {\n  if (typeof options?.wrapNumbers === \"function\") {\n    return options?.wrapNumbers(numString);\n  }\n  if (options?.wrapNumbers) {\n    return NumberValue.from(numString);\n  }\n  const num = Number(numString);\n  const infinityValues = [Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY];\n  const isLargeFiniteNumber = (num > Number.MAX_SAFE_INTEGER || num < Number.MIN_SAFE_INTEGER) && !infinityValues.includes(num);\n  if (isLargeFiniteNumber) {\n    if (typeof BigInt === \"function\") {\n      try {\n        return BigInt(numString);\n      } catch (error) {\n        throw new Error(`${numString} can't be converted to BigInt. Set options.wrapNumbers to get string value.`);\n      }\n    } else {\n      throw new Error(`${numString} is outside SAFE_INTEGER bounds. Set options.wrapNumbers to get string value.`);\n    }\n  }\n  return num;\n}, \"convertNumber\");\nvar convertString = /* @__PURE__ */ __name((stringValue) => stringValue, \"convertString\");\nvar convertBinary = /* @__PURE__ */ __name((binaryValue) => binaryValue, \"convertBinary\");\nvar convertList = /* @__PURE__ */ __name((list, options) => list.map((item) => convertToNative(item, options)), \"convertList\");\nvar convertMap = /* @__PURE__ */ __name((map, options) => Object.entries(map).reduce(\n  (acc, [key, value]) => (acc[key] = convertToNative(value, options), acc),\n  {}\n), \"convertMap\");\n\n// src/marshall.ts\nfunction marshall(data, options) {\n  const attributeValue = convertToAttr(data, options);\n  const [key, value] = Object.entries(attributeValue)[0];\n  switch (key) {\n    case \"M\":\n    case \"L\":\n      return options?.convertTopLevelContainer ? attributeValue : value;\n    case \"SS\":\n    case \"NS\":\n    case \"BS\":\n    case \"S\":\n    case \"N\":\n    case \"B\":\n    case \"NULL\":\n    case \"BOOL\":\n    case \"$unknown\":\n    default:\n      return attributeValue;\n  }\n}\n__name(marshall, \"marshall\");\n\n// src/unmarshall.ts\nvar unmarshall = /* @__PURE__ */ __name((data, options) => {\n  if (options?.convertWithoutMapWrapper) {\n    return convertToNative(data, options);\n  }\n  return convertToNative({ M: data }, options);\n}, \"unmarshall\");\n// Annotate the CommonJS export names for ESM import in node:\n\n0 && (module.exports = {\n  NumberValueImpl,\n  convertToAttr,\n  convertToNative,\n  marshall,\n  unmarshall\n});\n\n", "import { DynamoDBRecord } from 'aws-lambda';\nimport { unmarshall } from '@aws-sdk/util-dynamodb';\nimport { AttributeValue } from '@aws-sdk/client-dynamodb';\nimport { logger } from './utils';\nconst WEBSITE_URL = process.env.WEBSITE_URL || 'https://wedding.himnher.dev';\n\ninterface EmailMessage {\n  templateType: 'confirmation' | 'update' | 'reminder';\n  recipientEmail: string;\n  recipientName: string;\n  templateData: Record<string, unknown>;\n  guestId?: string;\n  eventId?: string;\n}\n\ninterface SQSMessage {\n  body: string;\n  messageAttributes: {\n    Type: {\n      dataType: string;\n      stringValue: string;\n    };\n    TemplateType: {\n      dataType: string;\n      stringValue: string;\n    };\n  };\n}\n\n/**\n * Process DynamoDB stream records and transform them into email messages\n * This function is called by EventBridge Pipes as an enrichment step\n */\nexport const handler = async (events: DynamoDBRecord[]): Promise<SQSMessage[]> => {\n  logger.info('Processing stream records', { recordCount: events.length });\n\n  const emailMessages: EmailMessage[] = [];\n\n  for (const record of events) {\n    try {\n      // Only process INSERT and MODIFY events for RSVP records\n      if (!['INSERT', 'MODIFY'].includes(record.eventName || '')) {\n        continue;\n      }\n\n      const streamRecord = record.dynamodb;\n      if (!streamRecord) {\n        continue;\n      }\n\n      // Check if this is an RSVP record\n      const keys = streamRecord.Keys;\n      if (!keys?.SK?.S?.startsWith('RSVP#')) {\n        continue;\n      }\n\n      // Get the new image (current state of the item)\n      const newImage = streamRecord.NewImage;\n      if (!newImage) {\n        continue;\n      }\n\n      // Unmarshall the DynamoDB record\n      const item = unmarshall(newImage as Record<string, AttributeValue>);\n\n      // Extract relevant fields\n      const guestEmail = item.guest_email;\n      const guestName = item.guest_name;\n      const eventId = item.event_id;\n      const rsvpStatus = item.rsvp_status;\n      const attendeeCount = item.attendee_count || 1;\n      const confirmationNumber = item.confirmation_number;\n      const eventName = item.event_name || 'Our Wedding';\n      const eventDate = item.event_date;\n      const eventLocation = item.event_location || '';\n      const plusOnes = item.plus_ones || [];\n      const dietaryRestrictions = item.dietary_restrictions;\n      const specialRequests = item.special_requests;\n\n      // Check if we should send an email\n      // Send email for new RSVPs or when status changes\n      let shouldSendEmail = false;\n      let templateType: 'confirmation' | 'update' = 'confirmation';\n\n      if (record.eventName === 'INSERT') {\n        // New RSVP - always send confirmation\n        shouldSendEmail = true;\n        templateType = 'confirmation';\n      } else if (record.eventName === 'MODIFY') {\n        // Check if RSVP status changed\n        const oldImage = streamRecord.OldImage;\n        if (oldImage) {\n          const oldItem = unmarshall(oldImage as Record<string, AttributeValue>);\n          if (oldItem.rsvp_status !== rsvpStatus) {\n            // Status changed - send update email\n            shouldSendEmail = true;\n            templateType = 'update';\n          }\n        }\n      }\n\n      if (shouldSendEmail && guestEmail && guestName) {\n        const emailMessage: EmailMessage = {\n          templateType,\n          recipientEmail: guestEmail,\n          recipientName: guestName,\n          templateData: {\n            guestName,\n            eventName,\n            eventDate,\n            eventLocation,\n            rsvpStatus,\n            attendeeCount,\n            confirmationNumber,\n            plusOnes,\n            dietaryRestrictions,\n            specialRequests,\n            websiteUrl: WEBSITE_URL,\n            email: guestEmail,\n          },\n          guestId: guestEmail,\n          eventId,\n        };\n\n        emailMessages.push(emailMessage);\n\n        logger.info('Email message prepared', {\n          templateType,\n          recipientEmail: guestEmail,\n          eventId,\n          rsvpStatus,\n        });\n      }\n    } catch (error) {\n      logger.error('Error processing stream record', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n        recordEventName: record.eventName,\n      });\n      // Continue processing other records\n    }\n  }\n\n  // Return the email messages to be sent to SQS\n  // EventBridge Pipes expects an array of messages\n  return emailMessages.map((message) => ({\n    // The message body that will be sent to SQS\n    body: JSON.stringify(message),\n    // Optional message attributes\n    messageAttributes: {\n      Type: {\n        dataType: 'String',\n        stringValue: 'RSVPNotification',\n      },\n      TemplateType: {\n        dataType: 'String',\n        stringValue: message.templateType,\n      },\n    },\n  }));\n};\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable no-console */\nimport { APIResponse } from './types';\nimport { APIGatewayProxyEvent } from 'aws-lambda';\n\n/**\n * Logger utility for structured logging\n */\nexport const logger = {\n  info: (message: string, meta?: any) => {\n    console.log(\n      JSON.stringify({\n        level: 'INFO',\n        message,\n        ...meta,\n        timestamp: new Date().toISOString(),\n      })\n    );\n  },\n\n  warn: (message: string, meta?: any) => {\n    console.warn(\n      JSON.stringify({\n        level: 'WARN',\n        message,\n        ...meta,\n        timestamp: new Date().toISOString(),\n      })\n    );\n  },\n\n  error: (message: string, meta?: any) => {\n    console.error(\n      JSON.stringify({\n        level: 'ERROR',\n        message,\n        ...meta,\n        timestamp: new Date().toISOString(),\n      })\n    );\n  },\n\n  debug: (message: string, meta?: any) => {\n    if (process.env.DEBUG === 'true') {\n      console.debug(\n        JSON.stringify({\n          level: 'DEBUG',\n          message,\n          ...meta,\n          timestamp: new Date().toISOString(),\n        })\n      );\n    }\n  },\n};\n\nexport const createResponse = (statusCode: number, body: any): APIResponse => {\n  return {\n    statusCode,\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Headers':\n        'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',\n      'Access-Control-Allow-Methods': 'GET,POST,PUT,DELETE,OPTIONS',\n    },\n    body: JSON.stringify(body),\n  };\n};\n\nexport const createErrorResponse = (\n  statusCode: number,\n  error: string,\n  message: string,\n  requestId?: string\n): APIResponse => {\n  const errorBody = {\n    error,\n    message,\n    ...(requestId && { requestId }),\n  };\n\n  return createResponse(statusCode, errorBody);\n};\n\nexport const generateId = (): string => {\n  return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n};\n\nexport const getCurrentTimestamp = (): string => {\n  return new Date().toISOString();\n};\n\nexport const validateEmail = (email: string): boolean => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n};\n\nexport const validateRSVPStatus = (status: string): boolean => {\n  return ['attending', 'not-attending', 'maybe'].includes(status);\n};\n\n/**\n * Validate request body and headers\n */\nexport const validateRequest = (\n  event: APIGatewayProxyEvent\n): {\n  valid: boolean;\n  error?: string;\n} => {\n  // Check for body\n  if (!event.body) {\n    return { valid: false, error: 'Request body is required' };\n  }\n\n  // Try to parse JSON\n  try {\n    JSON.parse(event.body);\n  } catch {\n    return { valid: false, error: 'Invalid JSON in request body' };\n  }\n\n  // Check content type\n  const contentType = event.headers['Content-Type'] || event.headers['content-type'];\n  if (contentType && !contentType.includes('application/json')) {\n    return { valid: false, error: 'Content-Type must be application/json' };\n  }\n\n  return { valid: true };\n};\n"],
  "mappings": "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",
  "names": ["require_dist_cjs", "__commonJSMin", "exports", "module", "__defProp", "__getOwnPropDesc", "__getOwnPropNames", "__hasOwnProp", "__name", "target", "value", "__export", "all", "name", "__copyProps", "to", "from", "except", "desc", "key", "__toCommonJS", "mod", "index_exports", "NumberValue", "convertToAttr", "convertToNative", "marshall", "unmarshall", "_NumberValue", "valueOf", "stringValue", "data", "options", "convertToNullAttr", "convertToListAttr", "convertToSetAttr", "convertToMapAttrFromIterable", "convertToMapAttrFromEnumerableProps", "isBinary", "convertToBinaryAttr", "convertToNumberAttr", "convertToBigIntAttr", "convertToStringAttr", "item", "set", "setToOperate", "_", "num", "item2", "data2", "map", "validateBigIntAndThrow", "errorPrefix", "val", "binaryTypes", "convertNumber", "convertBinary", "convertString", "convertList", "convertMap", "numString", "infinityValues", "binaryValue", "list", "acc", "attributeValue", "process_stream_for_email_exports", "__export", "handler", "__toCommonJS", "import_util_dynamodb", "logger", "message", "meta", "WEBSITE_URL", "handler", "events", "logger", "emailMessages", "record", "streamRecord", "newImage", "item", "guestEmail", "guestName", "eventId", "rsvpStatus", "attendeeCount", "confirmationNumber", "eventName", "eventDate", "eventLocation", "plusOnes", "dietaryRestrictions", "specialRequests", "shouldSendEmail", "templateType", "oldImage", "emailMessage", "error", "message"]
}
