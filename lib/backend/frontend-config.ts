/* eslint-disable no-console */

import * as cdk from 'aws-cdk-lib';
import * as s3 from 'aws-cdk-lib/aws-s3';
import * as s3deploy from 'aws-cdk-lib/aws-s3-deployment';
import * as fs from 'fs';
import * as path from 'path';
import { Construct } from 'constructs';

export interface FrontendConfigProps {
  /**
   * Main API Gateway URL
   */
  mainApiUrl: string;

  /**
   * Admin API Gateway URL
   */
  adminApiUrl: string;

  /**
   * S3 bucket for the frontend (optional - to upload config there)
   */
  websiteBucket?: s3.IBucket;

  /**
   * Environment name
   */
  environment: string;
}

export class FrontendConfig extends Construct {
  constructor(scope: Construct, id: string, props: FrontendConfigProps) {
    super(scope, id);

    // Create the configuration object
    const config = {
      REACT_APP_API_URL: props.mainApiUrl,
      REACT_APP_ADMIN_API_URL: props.adminApiUrl,
      REACT_APP_ENVIRONMENT: props.environment,
      GENERATED_AT: new Date().toISOString(),
    };

    // Write config to local file for development
    const frontendPath = path.join(__dirname, '../../frontend');
    const envLocalPath = path.join(frontendPath, '.env.local');
    const configJsonPath = path.join(frontendPath, 'public', 'config.json');

    // Only write files if we have actual URLs (not CDK tokens)
    // CDK tokens contain "${Token[" which indicates they're not resolved yet
    const hasTokens =
      props.mainApiUrl.includes('${Token[') || props.adminApiUrl.includes('${Token[');

    if (!hasTokens) {
      // Create .env.local content
      const envContent = Object.entries(config)
        .map(([key, value]) => `${key}=${value}`)
        .join('\n');

      // Write to file during synthesis
      if (!fs.existsSync(frontendPath)) {
        fs.mkdirSync(frontendPath, { recursive: true });
      }

      fs.writeFileSync(
        envLocalPath,
        `# Auto-generated by CDK - DO NOT EDIT
# Generated at: ${config.GENERATED_AT}

${envContent}
`
      );

      // Also create a JSON config file for runtime loading
      if (!fs.existsSync(path.dirname(configJsonPath))) {
        fs.mkdirSync(path.dirname(configJsonPath), { recursive: true });
      }

      fs.writeFileSync(
        configJsonPath,
        JSON.stringify(
          {
            apiUrl: props.mainApiUrl,
            adminApiUrl: props.adminApiUrl,
            environment: props.environment,
          },
          null,
          2
        )
      );
    } else {
      console.log('\n========================================');
      console.log('Skipping frontend config file generation - URLs not yet resolved');
      console.log('Config files will be created after deployment');
      console.log('========================================\n');
    }

    // If website bucket provided, upload config there too
    if (props.websiteBucket) {
      new s3deploy.BucketDeployment(this, 'ConfigDeployment', {
        sources: [
          s3deploy.Source.jsonData('config.json', {
            apiUrl: props.mainApiUrl,
            adminApiUrl: props.adminApiUrl,
            environment: props.environment,
          }),
        ],
        destinationBucket: props.websiteBucket,
        destinationKeyPrefix: '/',
        prune: false,
        retainOnDelete: false,
      });
    }

    // Output the configuration
    new cdk.CfnOutput(this, 'FrontendEnvLocal', {
      value: envLocalPath,
      description: 'Frontend .env.local file has been generated',
    });

    new cdk.CfnOutput(this, 'FrontendConfigJson', {
      value: configJsonPath,
      description: 'Frontend config.json file has been generated',
    });

    // Log the configuration for visibility
    console.log('\n========================================');
    console.log('Frontend Configuration Generated:');
    console.log('========================================');
    console.log(`Main API URL: ${props.mainApiUrl}`);
    console.log(`Admin API URL: ${props.adminApiUrl}`);
    console.log(`Environment: ${props.environment}`);
    console.log(`Config written to: ${envLocalPath}`);
    console.log(`JSON config written to: ${configJsonPath}`);
    console.log('========================================\n');
  }
}
