{
  "rsvp-system": {
    "tasks": [
      {
        "id": 1,
        "title": "Setup Backend Infrastructure with AWS CDK",
        "description": "Create serverless backend infrastructure using AWS CDK including Lambda functions, API Gateway, and DynamoDB table",
        "details": "Setup AWS CDK stack extending the existing wedding website infrastructure. Create: 1) API Gateway REST API with CORS enabled for frontend integration 2) DynamoDB table with single-table design using PK/SK pattern for guests, events, and RSVP data 3) Lambda functions for RSVP operations using Node.js 22.x runtime 4) IAM roles and policies for Lambda-DynamoDB access. Use aws-cdk-lib 2.211.0 to maintain compatibility with existing CDK version. Implement proper error handling and CloudWatch logging for all Lambda functions.",
        "testStrategy": "Deploy CDK stack to test environment, verify API Gateway endpoints respond correctly, test DynamoDB table creation and access patterns, validate Lambda function execution with sample data, confirm CORS configuration works with frontend domain",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create new CDK stack for backend services",
            "description": "Set up a new CDK stack class extending existing infrastructure pattern with proper construct organization",
            "dependencies": [],
            "details": "Create new CDK stack class in the existing CDK project structure. Extend the current stack pattern used in the wedding website infrastructure. Set up proper construct organization with separate constructs for API, database, and compute resources. Configure stack props to accept environment-specific parameters. Ensure compatibility with existing aws-cdk-lib 2.211.0 version.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Set up DynamoDB table with single-table design",
            "description": "Create DynamoDB table with PK/SK pattern for guests, events, and RSVP data storage",
            "dependencies": [
              "1.1"
            ],
            "details": "Design and implement DynamoDB table using single-table design pattern. Set up partition key (PK) and sort key (SK) structure to support guests, events, and RSVP entities. Configure GSI for query patterns. Set up proper table attributes, billing mode, and encryption settings. Include data access patterns for efficient querying.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Create API Gateway with CORS configuration",
            "description": "Set up REST API Gateway with proper CORS settings for frontend integration",
            "dependencies": [
              "1.1"
            ],
            "details": "Create API Gateway REST API construct with proper resource structure for RSVP endpoints. Configure CORS to allow requests from the wedding website frontend domain. Set up request/response models, validation, and proper HTTP methods. Configure API Gateway logging and throttling settings.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Implement base Lambda function structure",
            "description": "Create Lambda function constructs with Node.js 22.x runtime and proper error handling framework",
            "dependencies": [
              "1.2",
              "1.3"
            ],
            "details": "Set up Lambda function constructs using Node.js 22.x runtime. Create base Lambda handler structure with proper error handling, logging, and response formatting. Set up Lambda layers for shared dependencies. Configure environment variables for DynamoDB table names and other configuration. Implement CloudWatch logging integration.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Configure IAM roles and policies for service integration",
            "description": "Set up proper IAM roles and policies for Lambda-DynamoDB access and API Gateway integration",
            "dependencies": [
              "1.4"
            ],
            "details": "Create IAM roles and policies following principle of least privilege. Set up Lambda execution role with DynamoDB read/write permissions for specific table and indexes. Configure API Gateway execution role for Lambda invocation. Set up CloudWatch logs permissions for all services. Implement proper resource-based policies for secure service integration.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 2,
        "title": "Design DynamoDB Data Model and Access Patterns",
        "description": "Implement single-table DynamoDB design with optimized access patterns for guest management and RSVP operations",
        "details": "Design single-table DynamoDB schema with entities: GUEST, EVENT, RSVP_RESPONSE, INVITATION_CODE. Use composite keys: PK='EVENT#{eventId}', SK='GUEST#{email}' for main access pattern. Create 2-3 GSIs for additional access patterns: 1) GSI1 for guest lookup by invitation code 2) GSI2 for filtering by RSVP status 3) GSI3 for admin queries by date/status. Include attributes: guest_name, email, phone, rsvp_status, dietary_restrictions, plus_ones_count, invitation_code, created_at, updated_at. Implement data validation and consistent naming conventions.",
        "testStrategy": "Create test data sets covering all entity types, verify all access patterns work efficiently, test GSI queries for performance, validate data integrity constraints, confirm single-table design handles all required queries",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Define Entity Relationships and Composite Key Structure",
            "description": "Design the core entity structure for GUEST, EVENT, RSVP_RESPONSE, and INVITATION_CODE with optimized composite key patterns",
            "dependencies": [],
            "details": "Define primary key structure using PK='EVENT#{eventId}' and SK='GUEST#{email}' pattern. Map out entity relationships and data hierarchy. Design composite keys for efficient querying of guest information within events. Document key patterns for each entity type and their relationships. Establish naming conventions for partition and sort keys.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Design Global Secondary Indexes for Access Patterns",
            "description": "Create three GSIs to support different query patterns: invitation code lookup, RSVP status filtering, and admin queries",
            "dependencies": [
              "2.1"
            ],
            "details": "Design GSI1 with PK='INVITATION#{code}' for guest lookup by invitation code. Create GSI2 with PK='EVENT#{eventId}#STATUS#{status}' for RSVP status filtering. Design GSI3 with PK='ADMIN' and SK='DATE#{date}#STATUS#{status}' for admin queries. Define projection attributes for each GSI to minimize query costs while supporting required access patterns.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Create Data Validation Schemas and Naming Conventions",
            "description": "Implement comprehensive data validation rules and establish consistent naming conventions for all attributes",
            "dependencies": [
              "2.2"
            ],
            "details": "Define validation schemas for all attributes: guest_name, email, phone, rsvp_status, dietary_restrictions, plus_ones_count, invitation_code, created_at, updated_at. Establish consistent naming conventions using snake_case for attributes and camelCase for API responses. Create enum definitions for status fields and validation rules for email format, phone numbers, and invitation codes.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Document Access Patterns and Query Efficiency Requirements",
            "description": "Document all supported access patterns with performance requirements and query optimization strategies",
            "dependencies": [
              "2.3"
            ],
            "details": "Document primary access patterns: get guest by event and email, lookup by invitation code, filter by RSVP status, admin queries by date/status. Define performance requirements for each pattern (target latency, throughput). Create query examples and expected response times. Document single-table design benefits and trade-offs. Include capacity planning guidelines and scaling considerations.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 3,
        "title": "Implement Guest Lookup and Authentication System",
        "description": "Create secure guest lookup system using invitation codes with JWT-based authentication",
        "details": "Build Lambda function for guest authentication using invitation codes. Generate unique UUIDs for invitation codes during guest data seeding. Implement JWT token generation using RS256 algorithm with 1-hour expiration for security. JWT payload includes: guest_email, event_id, invite_code, role (GUEST/ADMIN), exp, iat. Create middleware for token validation in subsequent API calls. Store JWT signing keys in AWS Systems Manager Parameter Store for security. Implement proper error handling for invalid codes, expired tokens, and unauthorized access.",
        "testStrategy": "Test invitation code validation with valid/invalid codes, verify JWT token generation and validation, test token expiration handling, validate middleware blocks unauthorized requests, confirm secure key storage and retrieval",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Lambda function for invitation code validation",
            "description": "Build AWS Lambda function to validate invitation codes against guest database and return guest information",
            "dependencies": [],
            "details": "Create Lambda function that accepts invitation code as input, queries DynamoDB to validate code exists and is active, returns guest details including email, event_id, and permissions. Implement proper error handling for invalid codes, database connection issues, and malformed requests. Include logging for security auditing.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement JWT token generation with RS256 algorithm",
            "description": "Set up JWT token creation with RS256 signing algorithm and proper payload structure",
            "dependencies": [
              "3.1"
            ],
            "details": "Implement JWT token generation using RS256 algorithm with 1-hour expiration. Create token payload containing guest_email, event_id, invite_code, role (GUEST/ADMIN), exp, and iat claims. Generate RSA key pair for signing and verification. Include token refresh logic for seamless user experience.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Configure AWS Systems Manager Parameter Store for key management",
            "description": "Set up secure storage and retrieval of JWT signing keys using AWS Systems Manager Parameter Store",
            "dependencies": [],
            "details": "Create secure parameters in AWS Systems Manager for RSA private and public keys. Configure proper IAM roles and policies for Lambda functions to access keys. Implement key rotation strategy and secure key retrieval functions. Set up parameter encryption using AWS KMS for additional security.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Create authentication middleware for API protection",
            "description": "Build middleware to validate JWT tokens and protect API endpoints from unauthorized access",
            "dependencies": [
              "3.2",
              "3.3"
            ],
            "details": "Develop middleware that extracts JWT tokens from Authorization headers, validates tokens using public key from Parameter Store, verifies token expiration and signature. Implement role-based access control for GUEST/ADMIN permissions. Add request context enrichment with authenticated user information.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Implement comprehensive error handling and security measures",
            "description": "Add robust error handling, security logging, and protection against common authentication vulnerabilities",
            "dependencies": [
              "3.1",
              "3.2",
              "3.4"
            ],
            "details": "Implement comprehensive error handling for invalid codes, expired tokens, malformed requests, and database errors. Add security logging for failed authentication attempts, suspicious activity patterns, and successful logins. Implement rate limiting for authentication endpoints, brute force protection, and secure error messages that don't leak sensitive information.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 4,
        "title": "Create Core RSVP API Endpoints",
        "description": "Implement RESTful API endpoints for RSVP operations including create, read, update functionality",
        "details": "Create Lambda functions for RSVP API endpoints: 1) GET /api/rsvp/{invitationCode} - retrieve guest info and current RSVP status 2) POST /api/rsvp - submit/update RSVP response 3) GET /api/rsvp/{invitationCode}/status - check RSVP completion status. Implement proper HTTP status codes (200, 201, 400, 401, 404, 500), request/response validation using Zod schemas, rate limiting to prevent abuse, and comprehensive error handling. Include CORS configuration for frontend domain. Use Node.js 22.x runtime for optimal performance.",
        "testStrategy": "Test all API endpoints with valid/invalid requests, verify proper HTTP status codes, test CORS configuration with frontend, validate request/response schemas, test rate limiting functionality, confirm error handling returns appropriate messages",
        "priority": "high",
        "dependencies": [
          3
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement GET /api/rsvp/{invitationCode} endpoint",
            "description": "Create Lambda function to retrieve guest information and current RSVP status using invitation code",
            "dependencies": [],
            "details": "Build Lambda function that accepts invitation code parameter, validates the code against DynamoDB, retrieves guest data and current RSVP status. Implement proper error handling for invalid codes (404), server errors (500), and success responses (200). Include CORS headers and integrate with authentication middleware from task 3.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Create POST /api/rsvp endpoint for RSVP submission",
            "description": "Implement Lambda function to handle RSVP form submissions and updates with comprehensive validation",
            "dependencies": [
              "4.1"
            ],
            "details": "Build POST endpoint that accepts RSVP data, validates request using Zod schemas, updates DynamoDB with guest responses. Implement proper HTTP status codes: 201 for new submissions, 200 for updates, 400 for validation errors, 401 for unauthorized access. Include request body validation for dietary restrictions, plus-one information, and special requests.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Add GET /api/rsvp/{invitationCode}/status endpoint",
            "description": "Create endpoint to check RSVP completion status and provide progress information",
            "dependencies": [
              "4.2"
            ],
            "details": "Implement Lambda function that returns RSVP completion status, including whether guest has responded, submission timestamp, and any pending requirements. Use proper status codes and provide detailed response indicating completion percentage and missing fields if applicable.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Implement request validation, error handling, and rate limiting",
            "description": "Add comprehensive request/response validation, error handling, and rate limiting across all RSVP endpoints",
            "dependencies": [
              "4.3"
            ],
            "details": "Integrate Zod schemas for request/response validation across all endpoints. Implement rate limiting using API Gateway throttling or custom Lambda logic to prevent abuse. Create standardized error response format with appropriate HTTP status codes. Add comprehensive logging for debugging and monitoring. Configure CORS for frontend domain access.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 5,
        "title": "Build Multi-Step RSVP Form Frontend",
        "description": "Create responsive multi-step RSVP form using React Hook Form and Zod validation replacing the current placeholder",
        "details": "Replace existing RSVP.tsx placeholder with multi-step form using React Hook Form 7.x and Zod 3.x for validation. Install dependencies: react-hook-form, @hookform/resolvers, zod. Create 4 steps: 1) Guest lookup with invitation code 2) Personal information and attendance confirmation 3) Dietary restrictions and special requests 4) Review and final submission. Implement progress indicator, step validation, form persistence using localStorage, and consistent styling with existing website theme using Framer Motion animations. Ensure mobile-first responsive design.",
        "testStrategy": "Test form validation on each step, verify localStorage persistence works across browser sessions, test responsive design on mobile/desktop, validate accessibility with screen readers, confirm consistent styling with website theme, test form submission integration with API",
        "priority": "high",
        "dependencies": [
          4
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Install and configure React Hook Form and Zod dependencies",
            "description": "Install react-hook-form, @hookform/resolvers, and zod packages, then configure TypeScript types and basic form setup",
            "dependencies": [],
            "details": "Run npm install react-hook-form @hookform/resolvers zod. Update package.json with correct versions (react-hook-form 7.x, zod 3.x). Create types for form schemas and configure TypeScript imports. Set up basic form context and providers for multi-step form state management.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Build step 1: Guest lookup with invitation code",
            "description": "Create the first step of RSVP form for guest lookup using invitation code validation",
            "dependencies": [
              "5.1"
            ],
            "details": "Create StepOne component with invitation code input field using react-hook-form. Implement Zod schema for invitation code validation (UUID format). Add form submission handler that validates code and retrieves guest information. Style with consistent theme matching existing website design. Include loading states and error handling.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Build step 2: Personal information and attendance confirmation",
            "description": "Create second step for personal details and attendance confirmation form",
            "dependencies": [
              "5.2"
            ],
            "details": "Create StepTwo component with form fields for guest name confirmation, email, phone number, and attendance selection (attending/not attending). Implement Zod validation schemas for personal information fields. Add conditional rendering based on attendance choice. Include proper form state management and validation feedback.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Build step 3: Dietary restrictions and special requests",
            "description": "Create third step for dietary restrictions and special accommodation requests",
            "dependencies": [
              "5.3"
            ],
            "details": "Create StepThree component with fields for dietary restrictions (checkboxes for common restrictions, custom text input), accessibility needs, and special requests textarea. Implement Zod validation for optional fields with character limits. Add conditional display based on attendance status from previous step.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Build step 4: Review and submission interface",
            "description": "Create final step showing review of all entered information with submission capability",
            "dependencies": [
              "5.4"
            ],
            "details": "Create StepFour component displaying read-only summary of all form data from previous steps. Include edit buttons to navigate back to specific steps. Implement final form submission with loading states and success/error feedback. Add confirmation dialog before submission and thank you message after successful submission.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Implement progress indicator, validation, and localStorage persistence",
            "description": "Add progress indicator, step-by-step validation, and form data persistence using localStorage",
            "dependencies": [
              "5.5"
            ],
            "details": "Create ProgressIndicator component showing current step and completion status. Implement form persistence using localStorage to save form data between sessions. Add step validation logic preventing navigation to next step without completing current step. Integrate Framer Motion animations for smooth step transitions. Ensure mobile-responsive design with proper touch interactions.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 6,
        "title": "Implement Plus-One and Party Management",
        "description": "Add functionality for managing plus-ones and family party RSVP responses within the form system",
        "details": "Extend RSVP form and backend to handle party management. Update DynamoDB schema to include plus_ones array with guest details, relationship type, and individual dietary preferences. Modify API endpoints to handle batch RSVP submissions for entire parties. Add dynamic form fields in frontend for plus-one information including name, dietary restrictions, and special needs. Implement validation for maximum plus-one limits per invitation. Create party summary view showing all attendees and their preferences.",
        "testStrategy": "Test party RSVP submissions with various plus-one counts, verify individual dietary preferences are captured correctly, test maximum plus-one limit enforcement, validate party summary displays accurate information, confirm batch API operations work correctly",
        "priority": "medium",
        "dependencies": [
          5
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Update DynamoDB Schema for Plus-One Support",
            "description": "Extend the DynamoDB data model to support plus-ones array and party relationships within the existing single-table design",
            "dependencies": [],
            "details": "Add plus_ones array field to GUEST entity containing guest details, relationship type, and individual dietary preferences. Update the schema to include party_id for grouping related guests and max_plus_ones limit per invitation. Modify existing GSI queries to handle party-based filtering and ensure data integrity constraints for plus-one relationships.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Modify API Endpoints for Batch Party Operations",
            "description": "Update Lambda functions and API Gateway endpoints to handle batch RSVP submissions for entire parties",
            "dependencies": [
              "6.1"
            ],
            "details": "Extend existing RSVP submission endpoints to accept party data arrays. Implement batch processing logic for multiple guest responses in single API call. Add validation for party consistency and plus-one limits. Update response format to handle party-level success/error states and individual guest validation results.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Create Dynamic Plus-One Form Fields",
            "description": "Implement dynamic form components in the frontend for capturing plus-one information and managing party details",
            "dependencies": [
              "6.1"
            ],
            "details": "Build React components for adding/removing plus-one entries dynamically. Include fields for plus-one name, dietary restrictions, special needs, and relationship type. Implement real-time validation for maximum plus-one limits and required field completion. Create intuitive UI for party management with clear visual grouping of family members and plus-ones.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Implement Party Summary and Validation Logic",
            "description": "Create party summary view and implement comprehensive validation logic for plus-one limits and party management",
            "dependencies": [
              "6.2",
              "6.3"
            ],
            "details": "Build party summary component displaying all attendees with their preferences and RSVP status. Implement client and server-side validation for maximum plus-one limits per invitation type. Add party-level validation for required information completion and dietary restriction conflicts. Create admin view for reviewing and managing party RSVPs with bulk operations support.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Update DynamoDB Schema for Plus-One Support",
            "description": "Extend the existing DynamoDB schema to support plus-ones array and party relationship management",
            "dependencies": [],
            "details": "Modify the RSVP_RESPONSE entity to include plus_ones array field containing guest details (name, email, dietary_restrictions, special_needs, relationship_type). Update GSI patterns to efficiently query party members. Add party_id field to group related RSVP responses. Implement data migration strategy for existing records. Update CloudFormation/CDK templates with new schema attributes and indexes.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Create Dynamic Plus-One Form Fields Component",
            "description": "Build frontend component for dynamically adding and managing plus-one information in the RSVP form",
            "dependencies": [
              "6.1"
            ],
            "details": "Create PlusOneFields component with add/remove functionality for plus-one entries. Include fields for name, dietary restrictions, special needs, and relationship type. Implement form validation for required fields and data format. Add visual indicators for maximum plus-one limits. Integrate with existing StepPersonal component and ensure proper state management. Style component to match existing form design patterns.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "Implement Batch Party RSVP API Endpoints",
            "description": "Create backend API endpoints to handle batch RSVP submissions for entire parties including plus-ones",
            "dependencies": [
              "6.1"
            ],
            "details": "Develop batch-party-rsvp Lambda function to process party RSVP submissions atomically. Implement validation for maximum plus-one limits per invitation. Create transaction logic to ensure all party members are saved together or none at all. Add error handling for partial failures and rollback mechanisms. Update existing create-rsvp endpoint to handle both individual and party submissions. Include proper logging for debugging party operations.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 8,
            "title": "Build Party Summary and Validation Logic",
            "description": "Create party summary view and implement comprehensive validation for plus-one limits and party management",
            "dependencies": [
              "6.2",
              "6.3"
            ],
            "details": "Build StepReview enhancements to display party summary with all attendees and their preferences. Implement client-side and server-side validation for maximum plus-one limits based on invitation type. Create party total calculation logic for headcount and dietary preference summaries. Add confirmation dialogs for party submission. Implement validation feedback for over-limit scenarios with clear user guidance. Ensure party data consistency across form steps.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 7,
        "title": "Setup Email Confirmation System with AWS SES",
        "description": "Implement automated email confirmations and reminders using AWS SES with proper bounce handling",
        "details": "Configure AWS SES in the CDK stack with proper domain verification and DKIM setup. Create email templates for: 1) RSVP confirmation 2) RSVP update notification 3) Reminder emails for non-respondents. Implement Lambda function for email sending with SES v3 SDK. Setup SNS topics and SQS queues for bounce/complaint handling with automated guest status updates. Include HTML and text versions of all emails with consistent branding. Implement email queue processing for bulk operations with proper retry logic.",
        "testStrategy": "Test email delivery for all template types, verify bounce handling updates guest status correctly, test email templates render properly in major email clients, confirm DKIM authentication works, validate retry logic handles temporary failures",
        "priority": "medium",
        "dependencies": [
          4
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Configure AWS SES in CDK with Domain Verification and DKIM",
            "description": "Set up AWS SES service in the CDK stack with proper domain verification, DKIM authentication, and production-ready configuration",
            "dependencies": [],
            "details": "Add SES configuration to CDK stack including domain identity, DKIM setup, and reputation monitoring. Configure proper IAM permissions for Lambda functions to send emails. Set up domain verification records and ensure DKIM authentication is enabled for email deliverability.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Create HTML and Text Email Templates",
            "description": "Design and implement responsive email templates for RSVP confirmations, updates, and reminder notifications",
            "dependencies": [
              "7.1"
            ],
            "details": "Create branded HTML and plain text email templates for: RSVP confirmation, RSVP update notification, and reminder emails for non-respondents. Ensure templates are responsive, accessible, and maintain consistent branding with the wedding website. Include dynamic content placeholders for guest information and event details.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Build Lambda Function for Email Sending with SES v3 SDK",
            "description": "Implement Lambda function that handles email sending operations using AWS SES v3 SDK with proper error handling",
            "dependencies": [
              "7.2"
            ],
            "details": "Create Lambda function using SES v3 SDK for sending emails with template selection, recipient management, and comprehensive error handling. Implement proper logging, monitoring, and integration with DynamoDB for tracking email status. Include support for both individual and batch email operations.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Setup SNS Topics and SQS Queues for Bounce and Complaint Handling",
            "description": "Configure SNS/SQS infrastructure for handling email bounces and complaints with automated guest status updates",
            "dependencies": [
              "7.3"
            ],
            "details": "Set up SNS topics for SES bounce and complaint notifications. Create SQS queues for processing these notifications with dead letter queues for failed processing. Implement Lambda function to process bounce/complaint messages and automatically update guest status in DynamoDB. Configure proper retry policies and monitoring.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Implement Email Queue Processing with Retry Logic",
            "description": "Build robust email queue system for bulk operations with exponential backoff retry logic and failure handling",
            "dependencies": [
              "7.4"
            ],
            "details": "Implement SQS-based email queue for bulk email operations with exponential backoff retry logic. Create processing Lambda function that handles email batching, rate limiting to respect SES sending limits, and proper failure handling. Include monitoring and alerting for queue health and processing failures.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 8,
        "title": "Create Admin Dashboard for Guest Management",
        "description": "Build comprehensive admin dashboard for wedding planners to manage RSVPs, view analytics, and export data",
        "details": "Create protected admin routes in React app with separate authentication flow. Build dashboard components: 1) Real-time RSVP statistics with charts 2) Guest list with search/filter capabilities 3) Bulk operations for sending reminders 4) Data export functionality (CSV/PDF) 5) Event management interface. Implement admin API endpoints with proper authorization checks using JWT role-based access. Use React Query for efficient data fetching and caching. Include responsive design for tablet/desktop use.",
        "testStrategy": "Test admin authentication and authorization, verify real-time statistics update correctly, test search/filter functionality with large guest lists, validate bulk operations work without timeouts, confirm data export generates accurate files, test responsive design on various screen sizes",
        "priority": "medium",
        "dependencies": [
          6,
          7
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement Admin Authentication System",
            "description": "Create separate admin authentication flow with JWT-based access control and role validation",
            "dependencies": [],
            "details": "Build admin login component with email/password authentication. Create separate admin JWT tokens with ADMIN role. Implement protected route wrapper component that validates admin JWT tokens and redirects unauthorized users. Add admin logout functionality and token refresh mechanism.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Create Dashboard Layout and Navigation",
            "description": "Build responsive admin dashboard layout with navigation sidebar and main content area",
            "dependencies": [
              "8.1"
            ],
            "details": "Design dashboard shell component with collapsible sidebar navigation. Create responsive layout that works on tablet/desktop devices. Include navigation items for RSVP stats, guest management, bulk operations, and export tools. Add user profile section with logout option.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Build Real-time RSVP Statistics Dashboard",
            "description": "Implement statistics dashboard with charts showing RSVP metrics and real-time updates",
            "dependencies": [
              "8.2"
            ],
            "details": "Create statistics overview component with key metrics cards (total invites, confirmed, pending, declined). Implement charts using chart library for visual data representation. Set up React Query for real-time data fetching with polling. Display breakdown by dietary restrictions, plus-ones, and other relevant metrics.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Implement Guest List Management Interface",
            "description": "Build comprehensive guest list view with search, filter, and individual guest management capabilities",
            "dependencies": [
              "8.2"
            ],
            "details": "Create guest list table component with pagination for large datasets. Implement search functionality by name, email, or invitation code. Add filter options for RSVP status, dietary restrictions, and plus-one count. Include individual guest edit capabilities and RSVP status override functionality.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Create Bulk Operations and Reminder System",
            "description": "Implement bulk operations interface for sending reminders and managing multiple guests simultaneously",
            "dependencies": [
              "8.4"
            ],
            "details": "Build bulk selection interface with checkbox functionality for guest list. Create reminder email composition tool with template options. Implement bulk status update capabilities. Add progress tracking for bulk operations with error handling and retry mechanisms.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Implement Data Export Functionality",
            "description": "Create data export system supporting CSV and PDF formats with customizable field selection",
            "dependencies": [
              "8.4"
            ],
            "details": "Build export interface with format selection (CSV/PDF) and field customization options. Implement CSV generation for guest lists and RSVP data. Create PDF report generation with formatted layouts for printing. Add download progress indicators and error handling for large datasets.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 9,
        "title": "Add Event-Specific RSVP Options",
        "description": "Implement multi-event RSVP functionality for ceremony, reception, and pre-wedding events",
        "details": "Extend data model to support multiple events per wedding with individual RSVP responses. Update DynamoDB schema to include event_responses object with separate attendance, dietary, and preference fields per event. Modify frontend form to show event-specific options with clear descriptions and separate attendance confirmations. Implement conditional logic for event-specific questions (transportation needs for destination events, accommodation preferences). Update API endpoints to handle multi-event submissions and queries.",
        "testStrategy": "Test RSVP submissions for multiple event combinations, verify event-specific data is stored and retrieved correctly, test conditional form logic shows appropriate questions, validate multi-event analytics in admin dashboard, confirm email confirmations include all event details",
        "priority": "medium",
        "dependencies": [
          5
        ],
        "status": "in-progress",
        "subtasks": [
          {
            "id": 1,
            "title": "Extend DynamoDB Schema for Multi-Event Support",
            "description": "Update database schema to support event_responses object with individual RSVP data per event",
            "dependencies": [],
            "details": "Modify DynamoDB table structure to include event_responses object containing separate fields for each event (ceremony, reception, pre-wedding). Each event should have attendance status, dietary restrictions, special requests, and event-specific preferences. Update existing data migration scripts to handle schema changes. Ensure backward compatibility with existing single-event RSVPs.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Update API Endpoints for Multi-Event Processing",
            "description": "Modify backend API to handle multi-event RSVP submissions and data retrieval",
            "dependencies": [
              "9.1"
            ],
            "details": "Update Lambda functions to process event_responses object in RSVP submissions. Modify GET endpoints to return event-specific data for form population. Add validation logic for required vs optional events. Update response formatting to handle multiple event statuses. Ensure API maintains compatibility with existing single-event clients while supporting new multi-event structure.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Implement Multi-Event Frontend Form Logic",
            "description": "Modify RSVP form to display event-specific options with clear descriptions and separate confirmations",
            "dependencies": [
              "9.2"
            ],
            "details": "Update React components to render individual event sections with attendance toggles. Add event descriptions and timing information for clarity. Implement progressive disclosure showing event-specific questions only when attendance is confirmed. Create unified form validation that handles partial submissions (attending some events but not others). Add visual indicators to distinguish between different event types.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Add Conditional Event-Specific Questions",
            "description": "Implement dynamic form fields that show relevant questions based on selected events",
            "dependencies": [
              "9.3"
            ],
            "details": "Create conditional logic for event-specific questions: transportation needs for destination ceremony, accommodation preferences for multi-day events, dietary restrictions per event, plus-one attendance per event. Implement smart form flow that shows/hides fields based on event selections. Add validation to ensure required event-specific information is completed. Create clear UI feedback for conditional field requirements.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 10,
        "title": "Implement Data Export and Vendor Integration",
        "description": "Create data export functionality for vendors with format customization and automated delivery options",
        "details": "Build Lambda functions for generating vendor-specific data exports: 1) Catering list with dietary restrictions and counts 2) Venue list with final headcount and special requests 3) Transportation list with pickup requirements 4) Accommodation preferences summary. Support multiple export formats (CSV, PDF, JSON) with customizable templates. Implement scheduled export delivery via email using SES. Create admin interface for configuring export templates and delivery schedules. Include data validation and formatting for vendor systems integration.",
        "testStrategy": "Test all export formats generate correctly with sample data, verify scheduled delivery works reliably, test vendor-specific formatting requirements, validate data accuracy in exported files, confirm email delivery to multiple vendor contacts",
        "priority": "medium",
        "dependencies": [
          8
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Build Lambda Functions for Vendor-Specific Data Export Generation",
            "description": "Create Lambda functions to generate vendor-specific data exports including catering lists, venue lists, transportation lists, and accommodation summaries",
            "dependencies": [],
            "details": "Develop Lambda functions for each vendor type: 1) Catering export with dietary restrictions and guest counts 2) Venue export with final headcount and special requests 3) Transportation export with pickup requirements and passenger details 4) Accommodation export with preferences summary. Each function should query DynamoDB for relevant RSVP data, aggregate information by vendor requirements, and prepare data structures for format conversion. Include data validation and error handling for missing or incomplete RSVP information.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement Multi-Format Export Support with Customizable Templates",
            "description": "Build export system supporting CSV, PDF, and JSON formats with customizable vendor-specific templates",
            "dependencies": [
              "10.1"
            ],
            "details": "Create format conversion modules for CSV (using csv-writer), PDF (using jsPDF or puppeteer), and JSON output. Implement template engine for customizable export formats allowing vendors to specify field ordering, headers, and data formatting. Store templates in S3 with version control and template validation. Include support for vendor logos, custom styling for PDFs, and configurable data field mapping. Add template testing functionality to preview exports before delivery.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Set Up Scheduled Export Delivery via SES",
            "description": "Implement automated email delivery system for scheduled vendor exports using Amazon SES",
            "dependencies": [
              "10.2"
            ],
            "details": "Configure Amazon SES for email delivery with proper domain verification and DKIM setup. Create EventBridge rules for scheduled export triggers (daily, weekly, custom intervals). Build email composition service with vendor-specific templates, attachment handling for export files, and delivery confirmation tracking. Implement retry logic for failed deliveries and bounce/complaint handling. Add email recipient management allowing multiple contacts per vendor with role-based distribution (primary, backup, accounting).",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Create Admin Interface for Export Template Configuration and Scheduling",
            "description": "Build admin dashboard interface for managing export templates, delivery schedules, and vendor configurations",
            "dependencies": [
              "10.3"
            ],
            "details": "Develop admin interface components for: 1) Vendor management with contact information and export preferences 2) Template editor with live preview for customizing export formats 3) Schedule configuration with flexible timing options and timezone support 4) Export history and delivery status tracking 5) Manual export trigger capability for ad-hoc requests. Include form validation, user permissions (admin-only access), and integration with existing admin dashboard design patterns. Add export analytics showing delivery success rates and vendor engagement metrics.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 11,
        "title": "Add Advanced Security and Performance Features",
        "description": "Implement rate limiting, input sanitization, audit logging, and performance optimizations for production deployment",
        "details": "Implement comprehensive security measures: 1) API rate limiting using AWS API Gateway throttling (10 req/sec per IP) 2) Input validation and sanitization for all user inputs using Zod schemas 3) Audit logging for all RSVP changes and admin actions 4) HTTPS enforcement and security headers 5) Data encryption at rest for sensitive information. Add performance optimizations: Lambda provisioned concurrency for critical endpoints, DynamoDB auto-scaling configuration, CloudFront caching for API responses where appropriate, and connection pooling for database operations.",
        "testStrategy": "Test rate limiting blocks excessive requests, verify input sanitization prevents XSS/injection attacks, confirm audit logs capture all required events, test HTTPS enforcement and security headers, validate performance improvements under load testing, confirm encryption works for sensitive data",
        "priority": "high",
        "dependencies": [
          9,
          10
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Configure API Gateway Rate Limiting and Throttling",
            "description": "Set up AWS API Gateway throttling policies with 10 requests per second per IP address and configure burst limits for production deployment",
            "dependencies": [],
            "details": "Configure API Gateway throttling settings including per-IP rate limits (10 req/sec), burst capacity configuration, and throttling error responses. Set up usage plans and API keys for different client types. Implement proper error handling for rate limit exceeded responses (429 status codes). Configure CloudWatch alarms for monitoring throttling metrics.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement Comprehensive Input Validation and Sanitization",
            "description": "Add Zod schema validation and input sanitization across all API endpoints to prevent XSS and injection attacks",
            "dependencies": [],
            "details": "Create Zod validation schemas for all API request payloads including RSVP forms, guest lookup, and admin operations. Implement input sanitization middleware for HTML tags, SQL injection patterns, and script injection attempts. Add validation for email formats, phone numbers, and special characters. Configure proper error responses for validation failures.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Set Up Audit Logging System",
            "description": "Implement comprehensive audit logging for all RSVP changes and administrative actions with CloudWatch integration",
            "dependencies": [],
            "details": "Create audit logging Lambda layer with structured logging format. Log all RSVP submissions, updates, deletions, and admin actions including user identity, timestamp, action type, and data changes. Integrate with CloudWatch Logs for centralized logging. Set up log retention policies and alerting for suspicious activities. Include request tracing and correlation IDs.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Configure HTTPS Enforcement and Security Headers",
            "description": "Set up HTTPS enforcement, SSL certificates, and implement comprehensive security headers for all API responses",
            "dependencies": [],
            "details": "Configure SSL/TLS certificates through AWS Certificate Manager. Implement security headers including HSTS, X-Content-Type-Options, X-Frame-Options, and CSP headers. Set up HTTPS-only redirects in CloudFront and API Gateway. Configure CORS policies with proper origin restrictions. Add security header middleware to Lambda functions.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Implement Data Encryption and Key Management",
            "description": "Set up encryption at rest for sensitive data using AWS KMS and implement proper key rotation policies",
            "dependencies": [],
            "details": "Configure DynamoDB encryption at rest using customer-managed KMS keys. Set up KMS key policies and rotation schedules. Implement encryption for sensitive fields like phone numbers and special requests. Configure Lambda environment variable encryption. Set up proper IAM roles for key access and implement encryption/decryption utilities.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Configure Performance Optimizations and Scaling",
            "description": "Implement Lambda provisioned concurrency, DynamoDB auto-scaling, and CloudFront caching strategies for optimal performance",
            "dependencies": [
              "11.1"
            ],
            "details": "Configure Lambda provisioned concurrency for critical RSVP endpoints to reduce cold starts. Set up DynamoDB auto-scaling policies for read/write capacity based on utilization metrics. Implement CloudFront caching with appropriate TTL values for API responses. Configure connection pooling for database operations and optimize Lambda memory allocation based on performance testing.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 12,
        "title": "Implement Mobile Optimization and PWA Features",
        "description": "Optimize RSVP system for mobile devices and add Progressive Web App capabilities for offline functionality",
        "details": "Enhance mobile experience with: 1) PWA manifest for app-like installation 2) Service worker for offline form completion and sync when online 3) Touch-optimized form controls and navigation 4) Mobile-specific validation feedback 5) Reduced data usage with optimized API payloads 6) Quick RSVP flow for returning users. Implement offline storage using IndexedDB for form data persistence, background sync for form submissions, and push notifications for RSVP reminders (optional). Ensure WCAG 2.1 AA accessibility compliance throughout.",
        "testStrategy": "Test PWA installation on various mobile devices, verify offline form completion works correctly, test background sync functionality, validate touch interactions and mobile navigation, confirm accessibility compliance with screen readers, test push notifications if implemented, verify reduced data usage in network throttling conditions",
        "priority": "medium",
        "dependencies": [
          11
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement PWA Manifest and Service Worker Setup",
            "description": "Create PWA manifest file and implement service worker for offline functionality and app installation",
            "dependencies": [],
            "details": "Create manifest.json with app metadata (name, icons, theme colors, display mode). Implement service worker registration in main app. Set up basic caching strategies for static assets. Enable 'Add to Home Screen' functionality. Configure scope and start URL for PWA installation.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement IndexedDB for Offline Data Persistence",
            "description": "Set up IndexedDB storage system for offline form data and implement background sync",
            "dependencies": [
              "12.1"
            ],
            "details": "Create IndexedDB schema for storing RSVP form data offline. Implement data models for guest info, dietary preferences, and plus-ones. Add background sync API for queuing form submissions when offline. Handle sync conflicts and duplicate submission prevention. Store partial form progress for user continuity.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Optimize Mobile Touch Interactions and Navigation",
            "description": "Enhance mobile user experience with touch-optimized controls and navigation patterns",
            "dependencies": [],
            "details": "Implement touch-friendly form controls with proper sizing (min 44px touch targets). Add mobile-specific navigation patterns like bottom navigation or drawer menu. Optimize form field spacing and grouping for mobile screens. Implement swipe gestures for multi-step forms. Add mobile-specific loading states and progress indicators.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Implement Mobile-Specific Validation and API Optimization",
            "description": "Add mobile-optimized validation feedback and reduce API payload sizes for mobile data usage",
            "dependencies": [
              "12.2"
            ],
            "details": "Create mobile-friendly validation messages with better positioning. Implement real-time validation with debounced API calls. Optimize API payloads by removing unnecessary data fields for mobile requests. Add request compression and implement progressive data loading. Create mobile-specific error handling with retry mechanisms.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Ensure WCAG 2.1 AA Accessibility Compliance",
            "description": "Implement comprehensive accessibility features meeting WCAG 2.1 AA standards for mobile PWA",
            "dependencies": [
              "12.3",
              "12.4"
            ],
            "details": "Add proper ARIA labels and roles throughout mobile interface. Implement keyboard navigation support for touch interfaces. Ensure sufficient color contrast ratios (4.5:1). Add screen reader support with meaningful announcements. Test with assistive technologies on mobile devices. Implement focus management for modal dialogs and form transitions.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 13,
        "title": "Fix admin dashboard data counting and display issues",
        "description": "Resolve incorrect guest counts and display issues in the admin dashboard by fixing DynamoDB filtering, data formatting, and React component warnings.",
        "details": "Based on analysis of the existing codebase, this task addresses multiple critical issues in the admin dashboard:\n\n1. **DynamoDB Entity Type Filtering**: Update admin-stats.ts and admin-guests.ts Lambda functions to filter DynamoDB scan results by EntityType='GUEST' instead of scanning all records. The current code (lines 56-58 in admin-stats.ts and 48-50 in admin-guests.ts) performs unfiltered scans, causing incorrect counts. Add FilterExpression to ScanCommand:\n```typescript\nconst guestsResponse = await docClient.send(new ScanCommand({\n  TableName: GUESTS_TABLE_NAME,\n  FilterExpression: 'EntityType = :entityType',\n  ExpressionAttributeValues: { ':entityType': 'GUEST' }\n}));\n```\n\n2. **Fix Guest Name Display**: In admin-guests.ts (lines 139-141), the guest name lookup logic falls back to 'Unknown' when guest data is missing. Improve the data merging logic to properly handle missing guest names and ensure proper fallback values.\n\n3. **Date Formatting**: Fix 'Invalid Date' issues in StatsOverview.tsx (lines 96-104) and GuestList.tsx (line 300) by adding proper date validation and null checks before calling Date constructor. Add helper function:\n```typescript\nconst formatDate = (dateString?: string) => {\n  if (!dateString) return '-';\n  const date = new Date(dateString);\n  return isNaN(date.getTime()) ? 'Invalid Date' : date.toLocaleDateString();\n};\n```\n\n4. **React Key Warnings**: Fix missing keys in list components by ensuring unique key props in StatsOverview.tsx (line 205) and GuestList.tsx (line 267). Use combination of index and unique identifiers where needed.\n\n5. **RSVP Deduplication**: Implement proper deduplication logic in admin-stats.ts to handle multiple RSVP responses from the same guest. Add logic to keep only the latest response per invitation code:\n```typescript\nconst latestRsvps = rsvps.reduce((acc, rsvp) => {\n  const existing = acc[rsvp.invitationCode];\n  if (!existing || new Date(rsvp.submittedAt) > new Date(existing.submittedAt)) {\n    acc[rsvp.invitationCode] = rsvp;\n  }\n  return acc;\n}, {});\n```\n\n6. **Update DynamoDB Schema Alignment**: Ensure all Lambda functions align with the single-table design specified in dynamodb-schema.ts, using proper EntityType filtering and consistent field naming conventions.\n\nThe fixes should maintain backward compatibility while resolving data accuracy issues in the dashboard displays.",
        "testStrategy": "Verify fixes by: 1) Creating test guests with EntityType='GUEST' and other entity types, confirming only GUEST entities are counted 2) Testing with guests having null/undefined names and dates to ensure proper fallback display 3) Checking browser console for React key warnings elimination 4) Creating multiple RSVP responses for same guest and verifying only latest is counted 5) Validating admin dashboard shows accurate guest counts matching actual database records 6) Testing date display with various date formats and null values 7) Confirming dietary restriction counts are accurate after deduplication 8) Load testing with larger datasets to ensure scan performance with filtering",
        "status": "done",
        "dependencies": [
          2,
          8
        ],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "Add EntityType filtering to DynamoDB scan operations in Lambda functions",
            "description": "Update admin-stats.ts and admin-guests.ts Lambda functions to filter DynamoDB scan results by EntityType='GUEST' instead of scanning all records. Add FilterExpression to ScanCommand operations to ensure only GUEST entities are retrieved and counted.",
            "dependencies": [],
            "details": "In admin-stats.ts (lines 56-58) and admin-guests.ts (lines 48-50), replace unfiltered ScanCommand with filtered version:\n```typescript\nconst guestsResponse = await docClient.send(new ScanCommand({\n  TableName: GUESTS_TABLE_NAME,\n  FilterExpression: 'EntityType = :entityType',\n  ExpressionAttributeValues: { ':entityType': 'GUEST' }\n}));\n```\nThis aligns with the single-table design specified in dynamodb-schema.ts where guest records have EntityType='GUEST'.",
            "status": "done",
            "testStrategy": "Create test data with mixed EntityType values (GUEST, EVENT, RSVP_RESPONSE) and verify that only GUEST entities are counted in admin statistics. Confirm guest counts match actual GUEST records in database."
          },
          {
            "id": 2,
            "title": "Implement RSVP deduplication logic to handle multiple responses per guest",
            "description": "Add deduplication logic in admin-stats.ts to handle scenarios where guests may have submitted multiple RSVP responses, ensuring only the latest response per invitation code is counted in statistics.",
            "dependencies": [
              "13.1"
            ],
            "details": "Implement deduplication logic after fetching RSVPs:\n```typescript\nconst latestRsvps = rsvps.reduce((acc, rsvp) => {\n  const existing = acc[rsvp.invitationCode];\n  if (!existing || new Date(rsvp.submittedAt) > new Date(existing.submittedAt)) {\n    acc[rsvp.invitationCode] = rsvp;\n  }\n  return acc;\n}, {});\nconst uniqueRsvps = Object.values(latestRsvps);\n```\nThen use uniqueRsvps for all statistical calculations.",
            "status": "done",
            "testStrategy": "Create multiple RSVP responses for the same invitation code with different timestamps and verify only the latest response is counted. Test with edge cases like missing timestamps and identical timestamps."
          },
          {
            "id": 3,
            "title": "Fix date formatting and validation in React components",
            "description": "Resolve 'Invalid Date' issues in StatsOverview.tsx and GuestList.tsx by adding proper date validation and null checks before calling Date constructor. Create reusable date formatting helper function.",
            "dependencies": [],
            "details": "Replace direct date formatting in StatsOverview.tsx (lines 96-104) and GuestList.tsx (line 300) with:\n```typescript\nconst formatDate = (dateString?: string) => {\n  if (!dateString) return '-';\n  const date = new Date(dateString);\n  return isNaN(date.getTime()) ? 'Invalid Date' : date.toLocaleDateString();\n};\n```\nApply this helper function to all date display locations.",
            "status": "done",
            "testStrategy": "Test with various date formats including null, undefined, invalid strings, and valid ISO dates. Verify all date displays show either proper formatted dates or appropriate fallback values."
          },
          {
            "id": 4,
            "title": "Fix React key warnings by adding proper key props to list components",
            "description": "Resolve React key warnings in StatsOverview.tsx and GuestList.tsx by ensuring unique key props are provided for all mapped list items, using combination of index and unique identifiers where needed.",
            "dependencies": [],
            "details": "Fix missing keys in StatsOverview.tsx (line 205) and GuestList.tsx (line 267). For the recent responses table in StatsOverview.tsx, use response email + timestamp as key. For guest list table, use invitation code as key. Ensure all mapped elements have stable, unique keys.",
            "status": "done",
            "testStrategy": "Check browser console for React key warnings after changes. Verify list components render correctly with proper keys and no console warnings during data updates or filtering."
          },
          {
            "id": 5,
            "title": "Improve guest name fallback logic and data merging in admin-guests.ts",
            "description": "Enhance the guest name lookup logic in admin-guests.ts to properly handle missing guest names and ensure robust fallback values when merging guest and RSVP data.",
            "dependencies": [
              "13.1"
            ],
            "details": "Improve the guest name fallback logic in admin-guests.ts (lines 139-141). Currently falls back to 'Unknown' when guest data is missing. Enhance the data merging logic in the mergedGuests mapping to:\n1. Check guest.name first\n2. Fall back to rsvp.name if available\n3. Use 'Unknown Guest' as final fallback\n4. Add proper null/undefined checks throughout the merging process",
            "status": "done",
            "testStrategy": "Test with guests having missing names, RSVP records without corresponding guest records, and various combinations of missing data. Verify all scenarios display appropriate names without errors."
          }
        ]
      },
      {
        "id": 14,
        "title": "Fix admin dashboard RSVP status mapping",
        "description": "The admin-guests Lambda function incorrectly maps RSVP status using boolean logic (rsvp.attending ? 'attending' : 'declined') instead of using the actual rsvp_status field values ('attending', 'not_attending', 'maybe', 'pending'). This causes all non-attending guests to show as 'Declined' instead of their actual status.",
        "details": "Problem identified at line 107 in /lib/backend/lambda/admin-guests.ts. The function uses a boolean 'attending' field that doesn't exist in the actual RSVP data structure. Need to update both admin-guests.ts and admin-stats.ts to use the proper rsvp_status field with correct string values. Also need to fix the update logic at line 231 that incorrectly converts status to boolean.",
        "testStrategy": "",
        "status": "done",
        "dependencies": [],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 15,
        "title": "Implement Backend API Endpoint for Updating Guest Information",
        "description": "Create a PUT endpoint at /admin/protected/guests/{invitationCode} in the admin Lambda function that enables updating guest records in DynamoDB with comprehensive field support including name, email, phone, RSVP status, party size, plus one details, and dietary restrictions.",
        "details": "Extend the existing admin-guests.ts Lambda function to handle PUT requests with invitation code path parameters. The current implementation supports updating guest information but needs enhancement for path-based routing. Implement: 1) Path parameter extraction for invitation code from '/admin/protected/guests/{invitationCode}' route 2) Enhanced input validation using Zod schemas to validate all guest fields (name, email, phone, RSVP status, party size, dietary restrictions, plus one details) 3) DynamoDB update operations for both GUEST#PROFILE and GUEST#RSVP records using the single-table design pattern 4) Proper error handling with 400 for validation errors, 404 for non-existent guests, and 500 for server errors 5) Update the admin-api.ts CDK configuration to add the path-based route resource 'guests.addResource('{invitationCode}')' with proper CORS headers 6) Comprehensive response structure returning updated guest data and confirmation messages 7) Audit logging for all admin modifications to track changes. Use existing DynamoDB client setup, maintain compatibility with current table structure (wedding-rsvp-production), and follow existing error handling patterns in admin-guests.ts:287-295.",
        "testStrategy": "Test endpoint functionality with valid invitation codes and various field updates, verify path parameter extraction works correctly, test input validation rejects invalid data formats, confirm database updates are applied to correct records, test error handling for non-existent invitation codes returns 404, verify CORS headers are properly configured for cross-origin requests, validate response structure includes updated guest information, test concurrent update scenarios to ensure data consistency",
        "status": "done",
        "dependencies": [
          1,
          2,
          4,
          8
        ],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "Add Path Parameter Route Configuration to CDK",
            "description": "Update the admin-api.ts CDK configuration to add the path-based route resource '{invitationCode}' under the guests resource with proper CORS headers and method integration for PUT requests.",
            "dependencies": [],
            "details": "Modify the createGuestsFunction method in lib/backend/admin-api.ts to add `guestsResource.addResource('{invitationCode}')` and attach the PUT method with proper Lambda integration and CORS configuration. This will enable the /admin/protected/guests/{invitationCode} endpoint pattern.",
            "status": "done",
            "testStrategy": "Verify CDK synthesizes correctly, test that the new route pattern is available in API Gateway, confirm CORS headers are properly configured for the path parameter route."
          },
          {
            "id": 2,
            "title": "Implement Path Parameter Extraction and Validation",
            "description": "Add logic to extract invitation code from the path parameters in the admin-guests.ts Lambda function and validate the invitation code format using Zod schemas.",
            "dependencies": [
              "15.1"
            ],
            "details": "Extend the admin-guests.ts handler to extract `event.pathParameters?.invitationCode` for PUT requests. Create a Zod schema to validate invitation code format (6-8 uppercase alphanumeric characters) based on existing validation patterns in rsvp-validation.ts. Add proper error handling for missing or invalid path parameters.",
            "status": "done",
            "testStrategy": "Test path parameter extraction with valid invitation codes, verify validation rejects invalid codes, test error handling for missing path parameters."
          },
          {
            "id": 3,
            "title": "Create Comprehensive Guest Update Zod Schema",
            "description": "Design and implement a Zod validation schema for guest update requests that supports all guest fields including name, email, phone, RSVP status, party size, plus one details, and dietary restrictions.",
            "dependencies": [
              "15.2"
            ],
            "details": "Create an AdminGuestUpdateSchema extending existing validation patterns from rsvp-validation.ts. Include validation for guest_name (2-100 chars), email format, phone regex, RSVP status enum, party size limits, plus one details array with nested validation, and dietary restrictions. Implement partial update support allowing optional fields.",
            "status": "done",
            "testStrategy": "Test validation accepts valid guest update objects, verify rejection of invalid field formats, test partial updates work correctly, validate nested plus one details validation."
          },
          {
            "id": 4,
            "title": "Implement Single-Table DynamoDB Update Operations",
            "description": "Update the DynamoDB operations to use the single-table design pattern for updating both GUEST#PROFILE and GUEST#RSVP records with proper composite keys and conditional updates.",
            "dependencies": [
              "15.3"
            ],
            "details": "Refactor the PUT endpoint logic to follow the single-table pattern from dynamodb-schema.ts. Update both PK='GUEST#{invitationCode}', SK='PROFILE' and PK='GUEST#{invitationCode}', SK='RSVP' records. Implement conditional updates to ensure records exist before updating, handle version conflicts, and maintain data consistency between profile and RSVP records.",
            "status": "done",
            "testStrategy": "Test updates to both GUEST#PROFILE and GUEST#RSVP records, verify conditional updates work correctly, test handling of non-existent records, validate data consistency between related records."
          },
          {
            "id": 5,
            "title": "Add Comprehensive Error Handling and Audit Logging",
            "description": "Implement robust error handling with proper HTTP status codes (400, 404, 500) and add audit logging for all admin modifications to track changes made to guest records.",
            "dependencies": [
              "15.4"
            ],
            "details": "Add try-catch blocks with specific error handling for validation errors (400), non-existent guests (404), and DynamoDB errors (500). Implement audit logging that captures the admin user, timestamp, invitation code, fields modified, old values, and new values. Store audit logs in DynamoDB with PK='AUDIT#{timestamp}', SK='GUEST#{invitationCode}' pattern for tracking.",
            "status": "done",
            "testStrategy": "Test error responses return correct HTTP status codes, verify audit logs are created for all successful updates, test error handling for various failure scenarios, validate audit log data structure and content."
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-09-08T01:12:16.853Z",
      "updated": "2025-09-11T16:25:21.067Z",
      "description": "Tasks for rsvp-system context"
    }
  },
  "website-improvements": {
    "tasks": [
      {
        "id": 1,
        "title": "Refactor Home page to display only Hero section",
        "description": "Modify the Home component in App.tsx to render only the Hero component instead of the current full-page layout that includes Travel, Events, Attire, Registry, and FAQ sections.",
        "details": "1. Locate the Home component or main routing logic in App.tsx\n2. Identify where Travel, Events, Attire, Registry, and FAQ components are currently rendered on the home page\n3. Remove these components from the home page render logic while keeping them available for individual page routes\n4. Ensure the Hero component remains as the sole content on the home page\n5. Verify that navigation menu still provides access to the removed sections as separate pages\n6. Update any routing configuration to ensure Travel, Events, Attire, Registry, and FAQ are accessible via navigation\n7. Test that the home page no longer scrolls through all content and only displays the Hero section with couple's information, photos, and heartfelt message\n8. Ensure responsive design is maintained for the simplified home page layout",
        "testStrategy": "1. Navigate to the home page and verify only the Hero section is displayed\n2. Confirm the page is no longer scrollable through multiple sections\n3. Test that the navigation menu still provides links to Travel, Events, Attire, Registry, and FAQ pages\n4. Click each navigation item to ensure the removed sections are still accessible as individual pages\n5. Verify the Hero section displays correctly with couple's information, photos, and heartfelt message\n6. Test responsive behavior on mobile and desktop to ensure the simplified layout works across devices\n7. Check that no broken links or missing content issues were introduced during the refactoring",
        "status": "done",
        "dependencies": [],
        "priority": "medium",
        "subtasks": [
          {
            "id": 1,
            "title": "Update Home component to render only Hero component",
            "description": "Modify the Home function in App.tsx to render only the Hero component instead of the current layout that includes Travel, Events, Attire, Registry, and FAQ components",
            "dependencies": [],
            "details": "In App.tsx line 17-28, change the Home function to return only <Hero /> component instead of the current multiple components. Remove Travel, Events, Attire, Registry, and FAQ components from the Home component JSX while keeping the Hero component as the sole content.",
            "status": "done",
            "testStrategy": "Navigate to the home page (/) and verify only the Hero section is displayed with couple's information, photos, and heartfelt message. Confirm the page is no longer scrollable through multiple sections."
          },
          {
            "id": 2,
            "title": "Verify individual route accessibility for removed components",
            "description": "Ensure that Travel, Events, Attire, Registry, and FAQ components are still accessible via their individual routes after being removed from the Home component",
            "dependencies": [
              "1.1"
            ],
            "details": "Test that the existing individual routes in App.tsx lines 38-43 (/travel, /events, /attire, /registry, /faq) still work correctly and render their respective components when accessed directly. Verify routing configuration remains intact for these separate pages.",
            "status": "done",
            "testStrategy": "Navigate to each individual route (/travel, /events, /attire, /registry, /faq) and verify each component renders correctly on its dedicated page. Test navigation between these individual pages."
          },
          {
            "id": 3,
            "title": "Test navigation menu functionality after home page refactor",
            "description": "Verify that the Navigation component still provides proper access to all sections as separate pages after the Home component modification",
            "dependencies": [
              "1.1",
              "1.2"
            ],
            "details": "Test the Navigation component links in frontend/src/components/Navigation.tsx lines 37-88 to ensure all navigation items (Travel, Stay, Events, Attire, Registry, FAQ, RSVP) still function correctly and direct users to the appropriate pages. Verify active state highlighting works properly.",
            "status": "done",
            "testStrategy": "Click each navigation menu item and verify it navigates to the correct page. Test both desktop and mobile navigation menus. Confirm active state styling is applied correctly for the current page."
          },
          {
            "id": 4,
            "title": "Validate Hero component standalone functionality",
            "description": "Ensure the Hero component works correctly as the sole content on the home page and maintains its responsive design and animations",
            "dependencies": [
              "1.1"
            ],
            "details": "Test that the Hero component in frontend/src/components/Hero.tsx maintains its full functionality when rendered alone on the home page. Verify all animations (framer-motion), images, styling, and responsive behavior work correctly without the other components present.",
            "status": "done",
            "testStrategy": "Test Hero component on various screen sizes to ensure responsive design is maintained. Verify all animations play correctly, images load properly, and the heartfelt message content displays as expected on the simplified home page layout."
          },
          {
            "id": 5,
            "title": "Perform comprehensive testing of refactored home page layout",
            "description": "Conduct thorough testing to ensure the refactored home page meets all requirements and maintains website functionality",
            "dependencies": [
              "1.1",
              "1.2",
              "1.3",
              "1.4"
            ],
            "details": "Perform end-to-end testing of the refactored application to ensure: home page displays only Hero section, navigation works correctly to all other sections, removed components are accessible via direct routes, responsive design is maintained, and overall user experience is preserved.",
            "status": "done",
            "testStrategy": "Execute full regression testing including: home page load test, navigation functionality test, direct URL access test for all routes, mobile responsiveness test, and user journey testing from home page to other sections via navigation menu."
          }
        ]
      },
      {
        "id": 2,
        "title": "Update Airport & Transportation section with accurate Goa transport information",
        "description": "Update the Transportation section in Travel.tsx to remove outdated Uber/Ola information and provide accurate guidance on current transportation options in Goa, emphasizing prepaid taxi counters and local alternatives.",
        "details": "1. Locate and modify lines 290-297 in Travel.tsx that contain the Uber/Ola transport option\n2. Remove or replace the Uber/Ola grid item with updated information about app-based cab restrictions\n3. Add a prominent warning message about government restrictions on Uber/Ola services in Goa\n4. Update the prepaid taxi counter option to emphasize it as the most reliable choice\n5. Research and update current pricing for prepaid taxis from Goa airport (verify if ₹1,800-2,500 range is still accurate)\n6. Add new transport option for hotel-arranged transfers with contact information if available\n7. Include local taxi service recommendations as alternatives\n8. Update the 'App-based booking' note to reflect current restrictions and recommend calling taxi services directly\n9. Ensure the transport options grid maintains consistent styling and responsive design\n10. Consider adding a last-updated timestamp for the transportation information",
        "testStrategy": "1. Verify the Uber/Ola option has been removed or updated with restriction warnings\n2. Confirm prepaid taxi counters are prominently featured as the primary recommendation\n3. Check that pricing information is current and clearly displayed\n4. Test responsive design across different screen sizes to ensure the updated transport grid displays correctly\n5. Validate that warning messages about app-based restrictions are visible and prominent\n6. Ensure all new transport options have consistent formatting with existing options\n7. Test that any contact information or booking instructions are accurate and functional\n8. Cross-reference updated information with recent travel guides or official Goa transport websites",
        "status": "done",
        "dependencies": [
          1
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Implement event map sidebar navigation for Events page",
        "description": "Create a fixed sidebar navigation on the left side of the Events page with clickable event links, active state indicators, and responsive behavior to improve navigation between wedding events.",
        "details": "1. Modify the Events.tsx component to implement a two-column layout with sidebar navigation and main content area\n2. Extract event titles and IDs from the existing 11 events data (Guest Arrival to After Party) to populate navigation links\n3. Create a fixed sidebar component with:\n   - List of all event titles as clickable navigation links\n   - Sticky positioning to remain visible during scrolling\n   - Active state styling to highlight the currently viewed event\n4. Implement smooth scrolling functionality using scrollIntoView() or similar when navigation links are clicked\n5. Add Intersection Observer API to detect which event card is currently in the viewport and update the active state in the sidebar accordingly\n6. Ensure the existing timeline layout is preserved in the main content area while accommodating the new sidebar\n7. Implement responsive behavior:\n   - Show full sidebar on desktop screens\n   - Collapse to a dropdown menu or toggle button on mobile devices\n   - Maintain proper spacing and layout across different screen sizes\n8. Style the sidebar to match the existing design system colors, typography, and spacing\n9. Utilize the existing data-event-id attributes on event cards for navigation targeting\n10. Test smooth scrolling performance and intersection observer accuracy across different browsers",
        "testStrategy": "1. Verify the sidebar appears on the left side of the Events page with all 11 event titles listed\n2. Click each navigation link to confirm smooth scrolling to the corresponding event card\n3. Scroll through the Events page manually and verify the active state indicator updates correctly in the sidebar\n4. Test responsive behavior by resizing the browser window to mobile dimensions and confirm the sidebar collapses appropriately\n5. Verify the sidebar maintains sticky positioning and remains visible during scrolling\n6. Check that the main content area timeline layout is preserved and properly spaced with the new sidebar\n7. Test on multiple browsers (Chrome, Firefox, Safari) to ensure cross-browser compatibility\n8. Validate that the sidebar styling matches the existing design system\n9. Confirm smooth scrolling works correctly with the existing data-event-id attributes on event cards\n10. Test accessibility features including keyboard navigation and screen reader compatibility",
        "status": "done",
        "dependencies": [],
        "priority": "medium",
        "subtasks": [
          {
            "id": 1,
            "title": "Create sidebar navigation component structure",
            "description": "Create a new EventsSidebar component with the basic structure for displaying navigation links and implement the two-column layout modification in Events.tsx",
            "dependencies": [],
            "details": "1. Create a new file frontend/src/components/EventsSidebar.tsx with React component structure\n2. Define props interface for EventsSidebar accepting events array and activeEventId\n3. Modify Events.tsx to implement two-column layout using CSS Grid or Flexbox\n4. Add container div with sidebar and main content areas\n5. Import and place EventsSidebar component in the left column\n6. Move existing events-timeline into the main content area (right column)\n7. Update Events.css to support the new layout structure with proper spacing",
            "status": "done",
            "testStrategy": "Verify the Events page displays with two-column layout, sidebar appears on left side, and existing timeline content remains in the main area without visual regression"
          },
          {
            "id": 2,
            "title": "Implement sidebar navigation links and styling",
            "description": "Build the clickable navigation links list in the sidebar using the existing events data and style it to match the design system",
            "dependencies": [
              "3.1"
            ],
            "details": "1. Extract event titles and IDs from the events array passed as props\n2. Render a list of navigation links using event.title and event.id\n3. Add CSS classes for sidebar styling (sticky positioning, background, padding)\n4. Style navigation links with proper typography, spacing, and hover states\n5. Match existing design system colors from Events.css variables (--primary-color, --secondary-color, etc.)\n6. Implement responsive behavior - full sidebar on desktop, hidden/collapsed on mobile\n7. Add proper semantic HTML structure using nav and ul elements",
            "status": "done",
            "testStrategy": "Verify all 11 event titles appear as clickable links in the sidebar, styling matches the existing design system, and sidebar maintains proper positioning during page scroll"
          },
          {
            "id": 3,
            "title": "Add smooth scrolling functionality for navigation clicks",
            "description": "Implement click handlers for sidebar navigation links that smoothly scroll to the corresponding event cards using the existing data-event-id attributes",
            "dependencies": [
              "3.2"
            ],
            "details": "1. Add onClick handlers to each navigation link in the sidebar\n2. Implement scrollToEvent function that uses document.querySelector to find target event card by data-event-id\n3. Use scrollIntoView({ behavior: 'smooth', block: 'start' }) to smoothly scroll to the target event\n4. Follow the existing scrollIntoView pattern used in CulturalCompass.tsx (line 67)\n5. Add proper error handling for cases where event element is not found\n6. Ensure smooth scrolling works with the existing timeline layout and doesn't interfere with other scroll behavior",
            "status": "done",
            "testStrategy": "Click each sidebar navigation link and verify smooth scrolling to the corresponding event card, confirm scrolling positioning places the event card appropriately in the viewport"
          },
          {
            "id": 4,
            "title": "Implement active state detection using Intersection Observer",
            "description": "Add Intersection Observer API to detect which event card is currently in the viewport and update the active state in the sidebar accordingly",
            "dependencies": [
              "3.3"
            ],
            "details": "1. Create useIntersectionObserver custom hook similar to existing ScrollSpy functionality\n2. Set up Intersection Observer to watch all elements with data-event-id attributes\n3. Configure observer with appropriate threshold (e.g., 0.3) and rootMargin for optimal detection\n4. Implement state management to track the currently active event ID\n5. Pass activeEventId to EventsSidebar component to highlight the active navigation link\n6. Add CSS styling for active state (different background color, border, or text color)\n7. Ensure proper cleanup of observer when component unmounts",
            "status": "done",
            "testStrategy": "Scroll through the Events page manually and verify the active state indicator in the sidebar updates correctly to highlight the currently visible event card in the viewport"
          },
          {
            "id": 5,
            "title": "Implement responsive behavior and mobile optimizations",
            "description": "Add responsive behavior for mobile devices, converting the sidebar to a dropdown menu or toggle button while maintaining all navigation functionality",
            "dependencies": [
              "3.4"
            ],
            "details": "1. Add CSS media queries for mobile breakpoints (matching existing @media (max-width: 768px) pattern)\n2. On mobile, hide the fixed sidebar and show a dropdown menu or toggle button instead\n3. Implement mobile navigation state management (open/closed) using useState\n4. Create mobile dropdown/toggle component with same navigation links\n5. Style mobile navigation to match existing design system and ensure proper z-index layering\n6. Test smooth scrolling functionality works correctly on mobile devices\n7. Ensure proper touch interactions and accessibility for mobile navigation\n8. Maintain proper spacing and layout across different screen sizes",
            "status": "done",
            "testStrategy": "Test on mobile viewport sizes (< 768px) to verify sidebar converts to dropdown/toggle, all navigation links remain functional, smooth scrolling works on mobile, and layout maintains proper spacing across different screen sizes"
          }
        ]
      },
      {
        "id": 4,
        "title": "Add comprehensive flight options analysis to Travel page",
        "description": "Replace basic airline cards with detailed flight options table including pricing, routing, class information, and interactive filtering for all major airlines serving GOI from SFO and SEA.",
        "details": "1. Create FlightOption interface with origin, destination, airline, route, duration, class, and priceRange properties\n2. Replace existing airline cards section (lines 154-233 in Travel.tsx) with comprehensive flight data structure\n3. Implement flight data for all major airlines (Emirates, Qatar Airways, Air India, Turkish Airlines, Singapore Airlines, Lufthansa, British Airways) from both SFO and SEA origins\n4. Build interactive filtering system allowing users to filter by:\n   - Origin city (SFO vs SEA)\n   - Airline selection\n   - Class type (Economy $900-$1,500, Business $3,900-$7,000, First $12,000-$19,000)\n   - Price range sliders\n5. Create sortable table/card interface with columns for airline, route, duration, and class-specific pricing\n6. Implement responsive design that transforms table to card layout on mobile devices\n7. Add visual indicators for best value options and shortest routes with color coding\n8. Include route visualization showing layover cities and total duration ranges\n9. Integrate booking recommendations and timing advice section\n10. Maintain existing accordion functionality and section structure within Travel page",
        "testStrategy": "1. Verify all 7 airlines display with accurate route information from both SFO and SEA origins\n2. Test filtering functionality for each filter type (origin, airline, class, price range)\n3. Confirm sorting works correctly for price, duration, and airline columns\n4. Validate price ranges display accurately for all three class types\n5. Test responsive behavior by resizing browser window and confirming table transforms to card layout on mobile\n6. Verify visual highlighting works for best value and shortest duration options\n7. Check that existing accordion functionality remains intact\n8. Test booking recommendations section displays properly\n9. Confirm route visualization shows layover cities clearly\n10. Validate that the enhanced section integrates smoothly with existing Travel page layout",
        "status": "done",
        "dependencies": [
          2
        ],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Consolidate visa-related sections into unified Travel.tsx panel",
        "description": "Merge the separate 'Required Documentation' and 'E-Visa Application Process' sections in Travel.tsx into a single comprehensive visa panel that eliminates redundancy and provides a streamlined visa guide for wedding guests.",
        "details": "1. Locate and analyze the two existing visa sections in Travel.tsx:\n   - Required Documentation section (lines 251-319)\n   - E-Visa Application Process section (lines 321-364)\n2. Create a new unified 'Visa Guide' section that combines:\n   - Visa timeline and application deadlines\n   - Complete documentation requirements list\n   - Step-by-step application process\n   - Pro tips and common pitfalls\n   - Processing timeframes and costs\n3. Reorganize content into logical subsections:\n   - Application Timeline & Deadlines\n   - Required Documents Checklist\n   - Application Process Steps\n   - Important Tips & Considerations\n4. Remove the two existing separate sections (lines 251-364) and replace with the consolidated panel\n5. Ensure consistent styling and formatting with other Travel.tsx panels\n6. Maintain all existing visa information while eliminating duplicate content\n7. Add clear headings and improved visual hierarchy for better readability\n8. Verify all links and references are preserved in the consolidated section",
        "testStrategy": "1. Verify the two original visa sections (lines 251-319 and 321-364) have been completely removed from Travel.tsx\n2. Confirm the new consolidated visa panel appears in their place with all content properly merged\n3. Check that no visa-related information has been lost in the consolidation process\n4. Test that the new section maintains consistent styling with other panels on the Travel page\n5. Verify all external links and references within the visa content still function correctly\n6. Confirm the consolidated section provides a logical flow from timeline to documentation to application steps\n7. Test responsive design to ensure the consolidated content displays properly on mobile and desktop\n8. Validate that the section reduces cognitive load by eliminating redundant information while maintaining completeness",
        "status": "done",
        "dependencies": [
          2
        ],
        "priority": "medium",
        "subtasks": [
          {
            "id": 1,
            "title": "Analyze existing visa sections and extract all content",
            "description": "Examine the current 'E-Visa Application Process' panel (lines 252-319) and 'Required Documentation' panel (lines 322-364) in Travel.tsx to catalog all existing content including timeline information, application details, documentation requirements, pro tips, and warning messages.",
            "dependencies": [],
            "details": "Read through Travel.tsx lines 252-364 to identify: visa timeline with application deadlines (120 days before, 2-3 weeks recommended, 4 days minimum), application details (website, processing time, cost, entry restrictions), pro tips (multiple-entry recommendation, screenshot approval, print copies), documentation requirements (passport requirements, photos, confirmations), and all warning messages. Create a comprehensive inventory of all content elements to ensure nothing is lost during consolidation.",
            "status": "done",
            "testStrategy": "Document all content elements found in both sections and verify completeness by cross-referencing with the original sections line by line."
          },
          {
            "id": 2,
            "title": "Design unified visa guide structure with logical subsections",
            "description": "Create a new consolidated visa panel structure with organized subsections: Application Timeline & Deadlines, Required Documents Checklist, Application Process Steps, and Important Tips & Considerations, ensuring improved visual hierarchy and logical content flow.",
            "dependencies": [
              "5.1"
            ],
            "details": "Design the new 'Visa Guide' panel structure using existing Travel.tsx panel patterns. Organize content into 4 main subsections: 1) Application Timeline & Deadlines (combining timeline from lines 259-284), 2) Required Documents Checklist (merging documentation from lines 329-351), 3) Application Process Steps (incorporating application details from lines 286-306), 4) Important Tips & Considerations (consolidating pro tips from lines 307-316 and warnings). Maintain consistent CSS classes like 'travel-panel', 'panel-header', and existing styling patterns found in other Travel.tsx panels.",
            "status": "done",
            "testStrategy": "Verify the new structure maintains visual consistency with other Travel.tsx panels and logically organizes all visa-related information without content gaps."
          },
          {
            "id": 3,
            "title": "Implement consolidated visa guide panel with merged content",
            "description": "Create the new unified 'Visa Guide' panel by combining all content from both existing visa sections into the designed structure, ensuring no information is lost and maintaining all links, styling, and interactive elements.",
            "dependencies": [
              "5.2"
            ],
            "details": "Implement the new consolidated panel in Travel.tsx by combining content from lines 252-364. Preserve all existing elements: Shield icon, visa timeline with timeline-items, application website link (indianvisaonline.gov.in), processing details, cost information, pro tips list, documentation requirements grid, and warning cards. Ensure all CSS classes (visa-content, visa-timeline, timeline-items, visa-details-grid, doc-requirements, doc-grid, warning-card) are maintained for proper styling. Keep all lucide-react icons (Shield, Globe, Info, Briefcase, AlertCircle) and their associated styling.",
            "status": "done",
            "testStrategy": "Compare the new consolidated panel against both original sections to ensure all content, links, styling classes, and interactive elements are preserved and properly functioning."
          },
          {
            "id": 4,
            "title": "Remove original visa sections and integrate consolidated panel",
            "description": "Remove the two separate visa sections (lines 252-319 and 322-364) from Travel.tsx and replace them with the new consolidated visa guide panel in the appropriate location within the travel layout.",
            "dependencies": [
              "5.3"
            ],
            "details": "Delete lines 252-364 in Travel.tsx which contain both the 'E-Visa Application Process' panel and 'Required Documentation' panel. Insert the new consolidated 'Visa Guide' panel in the same location to maintain the travel page flow. Ensure the new panel is properly positioned within the travel-content div structure and maintains proper spacing with surrounding elements. Verify that the data-section attribute and any section-specific functionality continues to work correctly.",
            "status": "done",
            "testStrategy": "Confirm the original two visa sections (lines 252-319 and 322-364) are completely removed and verify the new consolidated panel appears in the correct location within the travel page layout."
          },
          {
            "id": 5,
            "title": "Verify content integrity and test consolidated visa panel functionality",
            "description": "Conduct comprehensive testing to ensure the consolidated visa guide panel displays correctly, maintains all original functionality, preserves responsive design, and provides improved user experience with no missing information or broken styling.",
            "dependencies": [
              "5.4"
            ],
            "details": "Test the consolidated visa panel across different screen sizes to ensure responsive design is maintained. Verify all interactive elements work: hover effects, warning cards, timeline styling, and external links (indianvisaonline.gov.in). Check that all content from both original sections is present and easily accessible. Validate that CSS animations and motion effects from framer-motion continue to work. Ensure the new panel integrates seamlessly with the overall Travel.tsx page flow and maintains consistent visual hierarchy with other travel panels.",
            "status": "done",
            "testStrategy": "Test the consolidated panel on desktop and mobile viewports, verify all external links open correctly, confirm all original content is accessible and properly styled, and validate that no console errors or styling issues are present."
          }
        ]
      },
      {
        "id": 6,
        "title": "Design comprehensive Attire component structure and content layout",
        "description": "Create a detailed design specification for the Attire.tsx component that provides comprehensive dress code guidance for Indian wedding events, organized by event type with cultural context and practical advice for international guests.",
        "details": "1. Research and document Indian wedding attire customs:\n   - Traditional clothing categories (lehenga, saree, kurta, sherwani, etc.)\n   - Color significance and restrictions (avoiding white/black for certain events)\n   - Fabric choices suitable for Goan climate (breathable materials)\n   - Modesty guidelines and cultural sensitivities\n\n2. Design component structure with event-based organization:\n   - Welcome Party: Smart casual with Indian fusion options\n   - Mehendi: Bright colors, comfortable fabrics for sitting\n   - Sangam: Traditional Indian attire preferred\n   - Wedding Ceremony: Formal traditional wear, color guidelines\n   - Reception: Semi-formal to formal Indian or Western attire\n   - After Party: Party wear, more relaxed dress code\n\n3. Create user-friendly layout sections:\n   - Quick reference guide with do's and don'ts\n   - Event-specific attire cards with visual examples\n   - Shopping recommendations (online stores, local Goa options)\n   - Styling tips for international guests\n   - Climate considerations (lightweight fabrics, accessories)\n   - Rental options and tailoring services\n\n4. Plan interactive elements:\n   - Filterable attire options by event type\n   - Gender-specific recommendations\n   - Price range indicators for shopping guidance\n   - Size and fit advice for traditional Indian clothing\n\n5. Design responsive layout:\n   - Mobile-first approach for easy reference while shopping\n   - Clear visual hierarchy with event timeline integration\n   - Accessibility considerations for color-blind users\n   - Print-friendly version for offline reference",
        "testStrategy": "1. Validate content accuracy by reviewing with Indian wedding tradition experts and cultural consultants\n2. Test layout responsiveness across mobile, tablet, and desktop viewports\n3. Verify all event types from the Events page are covered with appropriate attire guidance\n4. Conduct user testing with international guests unfamiliar with Indian wedding customs\n5. Ensure shopping links and recommendations are current and accessible\n6. Test accessibility compliance including color contrast and screen reader compatibility\n7. Validate climate-appropriate fabric recommendations against Goa weather patterns\n8. Confirm cultural sensitivity review by Indian community members",
        "status": "pending",
        "dependencies": [
          3
        ],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "Design event-based attire section structure and data model",
            "description": "Create a comprehensive data model for the Attire component that organizes dress code recommendations by specific wedding events, incorporating existing event structure from Events.tsx and adding cultural context, climate considerations, and detailed attire specifications for each celebration.",
            "dependencies": [],
            "details": "1. Analyze the Event interface from Events.tsx to understand existing event structure and attire fields\n2. Create an AttireRecommendation interface that extends event data with detailed dress code specifications\n3. Design data structure for traditional Indian clothing categories (lehenga, saree, kurta, sherwani) with descriptions\n4. Add color significance mapping (auspicious vs. avoided colors for specific events)\n5. Include fabric recommendations suitable for Goan climate (breathable materials, lightweight options)\n6. Define modesty guidelines and cultural sensitivity information for international guests\n7. Structure shopping recommendations with price ranges, online stores, and local Goa options\n8. Plan interactive filtering system for gender-specific recommendations and event types",
            "status": "pending",
            "testStrategy": "Validate data model completeness by ensuring all events from Events.tsx have corresponding attire guidance. Test interface structure with sample data for each event type. Verify cultural accuracy through review with Indian wedding tradition experts."
          },
          {
            "id": 2,
            "title": "Create comprehensive attire content for each wedding event",
            "description": "Research and compile detailed dress code guidance for all wedding events including Welcome Party, Haldi, Sangeet, Baraat, Jaimala, Mandap ceremony, Reception, and After Party, with specific recommendations for traditional Indian attire, color guidelines, and practical advice for international guests.",
            "dependencies": [
              "6.1"
            ],
            "details": "1. Research traditional Indian wedding attire customs and significance for each ceremony type\n2. Compile specific outfit recommendations for each event:\n   - Welcome Party: Smart casual with Indian fusion options and Western alternatives\n   - Haldi: Bright yellows/oranges, comfortable fabrics, clothes guests don't mind staining\n   - Sangeet: Vibrant Indian festive wear, dance-friendly fabrics, statement jewelry\n   - Baraat/Jaimala/Mandap: Formal traditional wear, color restrictions, modest coverage\n   - Reception: Semi-formal Indian or Western attire, elegant options\n   - After Party: Party wear, comfortable dancing attire\n3. Document color significance and restrictions (avoiding white/black for ceremonies)\n4. Create gender-specific recommendations with sizing and fit advice for traditional clothing\n5. Add climate-specific guidance for Goan weather (lightweight fabrics, breathable materials)\n6. Include accessory recommendations (jewelry, footwear, dupatta styling)\n7. Compile shopping resources: online retailers, local Goa boutiques, rental options\n8. Add practical tips for international guests (tailoring services, backup options)",
            "status": "pending",
            "testStrategy": "Review content accuracy with cultural consultants and Indian wedding planners. Test comprehensiveness by ensuring each event type has complete attire guidance. Validate shopping recommendations by verifying store availability and pricing information."
          },
          {
            "id": 3,
            "title": "Implement responsive component layout with event-based organization",
            "description": "Design and implement the React component structure for the Attire page using a mobile-first responsive layout that organizes dress code information by wedding events, featuring interactive filtering, visual event cards, and seamless integration with the existing site design system.",
            "dependencies": [
              "6.1",
              "6.2"
            ],
            "details": "1. Create main AttireSection component with event-based organization matching Events.tsx structure\n2. Implement EventAttireCard components for each wedding event with:\n   - Event name and cultural context indicators\n   - Recommended attire categories with visual examples\n   - Color palette guidance and restrictions\n   - Fabric and styling recommendations\n   - Climate considerations for Goan weather\n3. Add interactive filtering system:\n   - Filter by event type (ceremonies vs. celebrations)\n   - Gender-specific recommendations toggle\n   - Traditional vs. fusion attire options\n4. Design responsive grid layout for mobile, tablet, and desktop viewports\n5. Integrate with existing CSS variables and design system from site\n6. Add smooth animations using Framer Motion matching other components\n7. Implement quick reference sidebar for do's and don'ts\n8. Create collapsible sections for detailed guidance vs. quick overview\n9. Add accessibility features including proper ARIA labels and keyboard navigation",
            "status": "pending",
            "testStrategy": "Test responsive layout across mobile, tablet, and desktop breakpoints. Verify interactive filtering functionality works smoothly. Validate design consistency with existing site components. Test accessibility using screen readers and keyboard navigation."
          },
          {
            "id": 4,
            "title": "Add shopping guidance and practical resources section",
            "description": "Implement a comprehensive shopping and resources section within the Attire component that provides practical guidance for guests to find appropriate wedding attire, including online retailers, local Goa shopping options, rental services, tailoring recommendations, and budget-friendly alternatives.",
            "dependencies": [
              "6.2",
              "6.3"
            ],
            "details": "1. Create ShoppingGuide component with categorized resources:\n   - Online retailers (Indian clothing websites, international shipping options)\n   - Local Goa shopping destinations (markets, boutiques, malls)\n   - Rental services for traditional Indian clothing\n   - Tailoring and alteration services in Goa\n2. Add price range indicators for different budget levels (budget, mid-range, luxury)\n3. Implement size conversion charts for international guests (US/UK to Indian sizing)\n4. Create timeline recommendations for shopping (how far in advance to order)\n5. Add backup plan suggestions for last-minute attire needs\n6. Include practical tips:\n   - Packing traditional clothing for travel\n   - Handling delicate fabrics in humid climate\n   - Emergency styling solutions\n7. Design accordion-style expandable sections for detailed information\n8. Add external links with proper target='_blank' and security attributes\n9. Include customer service contact information for recommended vendors\n10. Create printable shopping checklist for offline reference",
            "status": "pending",
            "testStrategy": "Verify all external links are functional and lead to relevant shopping resources. Test price range accuracy through market research. Validate size conversion charts with actual retailer sizing guides. Check printing functionality for shopping checklist."
          },
          {
            "id": 5,
            "title": "Integrate cultural context and styling tips with visual examples",
            "description": "Enhance the Attire component with rich cultural context explanations, styling tutorials, and visual guidance to help international guests understand the significance of traditional Indian wedding attire while providing practical styling advice for authentic and respectful presentation.",
            "dependencies": [
              "6.2",
              "6.3",
              "6.4"
            ],
            "details": "1. Create CulturalContext component with educational content:\n   - History and significance of traditional Indian wedding attire\n   - Explanation of regional variations and Goan wedding customs\n   - Cultural etiquette and respectful wearing of traditional clothing\n2. Add StylingTips component with practical guidance:\n   - How to drape a dupatta or saree properly\n   - Jewelry coordination and traditional significance\n   - Footwear selection for different venues (beach, indoor ceremonies)\n   - Hair and makeup suggestions to complement traditional attire\n3. Implement visual examples system:\n   - Outfit combination suggestions with placeholder images\n   - Color coordination examples for each event\n   - Before/after styling comparisons\n4. Add interactive style quiz to help guests choose appropriate attire based on:\n   - Comfort level with traditional clothing\n   - Event importance and guest relationship to couple\n   - Personal style preferences and body type\n5. Create troubleshooting guide for common styling issues\n6. Include video tutorial links for complex draping techniques\n7. Add cultural sensitivity guidelines for photography and social media\n8. Implement tooltips and expandable information cards for detailed explanations\n9. Design print-friendly format for offline reference during shopping or preparation",
            "status": "pending",
            "testStrategy": "Review cultural content accuracy with Indian cultural experts and wedding planners. Test interactive style quiz logic with various user inputs. Validate styling advice through feedback from users who have worn traditional Indian clothing. Check video tutorial links for accessibility and relevance."
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-09-08T08:55:12.331Z",
      "updated": "2025-09-08T21:20:24.068Z",
      "description": "General website improvements and fixes"
    }
  }
}